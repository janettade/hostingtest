{"componentChunkName":"component---src-templates-blog-post-js","path":"/notes-css-images-tae/","result":{"data":{"site":{"siteMetadata":{"title":"30 Days of CSS Girls","author":"CodingGirlsSG"}},"markdownRemark":{"id":"a6b064a7-1f43-554f-b1cc-4eeb5ffe6086","excerpt":"Original post by tae: Reading CSS Image Values and Replaced Content Module Level3 In markdown I wrote, the content is simillar 99% with specfication.. because I…","html":"<p>Original post by <a href=\"https://github.com/Ta2Rim\">tae</a>: <a href=\"https://gist.github.com/Ta2Rim/29af0d2b9ca5725982fde476a82e7a6c\">Reading CSS Image Values and Replaced Content Module Level3</a></p>\n<ul>\n<li>In markdown I wrote, the content is simillar 99% with specfication.. because I’ve never known the spec exists relates to Image Values and Replaced Content. And I newly learned about css grammer. It’s brilliant. I may be able to make my own language with it. I wish I could read English well. I feel the limitation of to get those spec. it’s not that 100% clear for me.</li>\n</ul>\n<p>And I get little confused about diffrence with specs and real implementation of UA. I don’t know which one I have to study.</p>\n<ul>\n<li></li>\n</ul>\n<p>In this specification, <code class=\"language-text\">&lt;image></code> doesn’t mean that HTML tag. <code class=\"language-text\">&lt;image></code> means CSS type.</p>\n<h1>Reading CSS Image Values and Replaced Content Module Level - #TIL</h1>\n<p>This Module introduces additinal ways of representing 2D images, for example as a list of URILs denoting fallbacks, or as a gradient.</p>\n<p>This module also defines several properties for manipulating raster images and for sizing or positioning replaced elements such as images within the box determined by the CSS layout algorithms.</p>\n<p>It also defines in a generic way CSS’s sizing algorithm for images and other replaced elements.</p>\n<h2>Value : the &#x3C;resolution> type</h2>\n<ul>\n<li><em>dpi</em> : dots per inch</li>\n<li><em>dpcm</em> : dots per centimeter</li>\n<li><em>dppx</em> : dots per px unit</li>\n</ul>\n<h2>Value : the &#x3C;image> type - denotes a 2D image</h2>\n<p><code class=\"language-text\">&lt;image = &lt;url> | &lt;image-list> | &lt;element-reference> | gradient</code>\nIn some case, an image is invalid, such as a <code class=\"language-text\">&lt;url></code> pointing to a resource that is not valid image format. An invalid image is rendered as a solid-color transparent image with no intrinsic dimensions.</p>\n<h3>url notation : <code class=\"language-text\">background-image : url(bg.png)</code></h3>\n<h3>image notation</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;image-list> = image( [ &lt;image-decl> , ]* [ &lt;image-decl> | &lt;color> ] )\n&lt;image-decl> = [&lt;url> | &lt;string> | &lt;element-reference> ]</code></pre></div>\n<p> <code class=\"language-text\">image()</code> function allows an author to :</p>\n<ul>\n<li>clip out a portion of an image</li>\n</ul>\n<p>  <code class=\"language-text\">background-image : image('sprites.svg#xywh=40,0,20,20')</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">background-image : url('fallback.png'); /* old UAs */\nbackground-image : image('sprites.png#xywh=10,30,60,20'); /* new UAs */</code></pre></div>\n<ul>\n<li>\n<p>specify fallback images</p>\n<p><code class=\"language-text\">background-image : image('tree.svg', 'tree.png', 'tree.gif');</code></p>\n<p><code class=\"language-text\">background-image : image('tree.svg', 'tree.png', 'tree.gif', #000000);</code></p>\n<p><code class=\"language-text\">background-image : image('nyan-cat.gif#frame-5', 'nyan-cat.png')</code></p>\n</li>\n<li>use a solid color</li>\n</ul>\n<p> <code class=\"language-text\">background-image : image(rgba(0, 0, 255, .5)), url('bg-image.png');</code></p>\n<p> In the above, the background is the image ‘bg-image.png’, overlaid with partially-transparent</p>\n<ul>\n<li>annotate an image with a directionality</li>\n</ul>\n<h2>Value : gradients</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"> &lt;gradient = [\n   &lt;linear-gradient> | &lt;radial-gradient> |\n   &lt;repeating-linear-gradient | &lt;repeating-radial-gradient> ]</code></pre></div>\n<p>  As with the other <code class=\"language-text\">&lt;image></code> types defined in this specfication, gradients canbe used in any property that accepts images.\n- <code class=\"language-text\">background : linear-gradient(white, grey);</code></p>\n<h3>linear-gradients notation</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  &lt;linear-gradient> = linear-gradient (\n    [ [ &lt;angle> | to &lt;side-or-corner> ] ,]?\n    &lt;color-stop>[, &lt;color-stop]+\n  )\n  \n  &lt;side-or-corner> = [left | right] || [top | bottom]</code></pre></div>\n<p>The first argument to the function specifies the gradient line, thiat gives the gradient a direction and determine how color-stops are positioned. it defaults to ‘to bottom’.</p>\n<p><code class=\"language-text\">linear-gradient(yellow, blue) /*defaults to 'to bottom'*/</code></p>\n<p><code class=\"language-text\">linear-gradient(to left top, yellow, blue)</code></p>\n<p><code class=\"language-text\">linear-gradient(-45deg, blue, yellow)</code></p>\n<p><code class=\"language-text\">linear-gradient(yellow, blue 20%, #0f0)</code></p>\n<h4>what can I do with linear-gradient?</h4>\n<p> magical things. - <a href=\"https://codepen.io/yuanchuan/pen/NLXZLm\"><div><iframe \n        height='400' \n        scrolling='no' \n        src='//codepen.io/yuanchuan/embed/preview/NLXZLm/?height=400&theme-id=dark&default-tab=html,result' \n        frameborder='no' \n        allowtransparency='true' \n        allowfullscreen='true' \n        style='width: 100%;'></iframe></div></a></p>\n<h3>radial-gradients notation</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  &lt;radial-gradient> = radial-gradient(\n    [ [ circle || &lt;length> ] [ at &lt;position> ]? , |\n      [ ellipse || [ &lt;length> | &lt;percentage ]{2} ] [ at &lt;position> ]? , |\n      [ [ circle | ellipse ] || &lt;extent-keyword> ]\n      at &lt;positon>,\n    ]?\n    &lt;color-stop> [ , &lt;color-stop> ]+\n  )\n  &lt;extent-keyword> = closest-corner | closest-side | fathest-corner | farthest-side</code></pre></div>\n<p><code class=\"language-text\">radial-graident(5em circle at top left, yellow, blue)</code></p>\n<p><code class=\"language-text\">&lt;position></code> is also used for ‘background-position’.\n<code class=\"language-text\">&lt;shape></code> can be either ‘circle’ or ‘ellipsis’, determines whether the gradient’s ending shape is a circle or an ellipsis. If <code class=\"language-text\">&lt;shape></code> is omitted, the ending shape defaults to a circle if the <size> is a single <length>, and to an ellipse otherwise.</p>\n<h4>Placing Color Stops</h4>\n<p>Color-stops are placed on a <strong>gradient ray</strong>, simillar to the gradient line of linear gradients. The gradient ray is anchored at the center of the gradient and extends toward the right. The 0% location is at the start of the gradient ray, and the 100% location is on the point where the gradient ray intersects the ending shape.</p>\n<p>The point’s color is then the color of the gradient ray at the location where this ellipse intersects it.</p>\n<h4>what can I do with radial-gradient?</h4>\n<p> magical things. too. - <a href=\"https://codepen.io/yuanchuan/pen/JxjJJL\"><div><iframe \n        height='400' \n        scrolling='no' \n        src='//codepen.io/yuanchuan/embed/preview/JxjJJL/?height=400&theme-id=dark&default-tab=html,result' \n        frameborder='no' \n        allowtransparency='true' \n        allowfullscreen='true' \n        style='width: 100%;'></iframe></div></a></p>\n<h4><code class=\"language-text\">repeating-linear-gradient()</code> and <code class=\"language-text\">repeating-radial-gradient</code> : Repeating Gradients</h4>\n<p>Unlike <linear-gradient> and <radial-gradient>, When rendered, the color-stops are repeated infinitely in both directions, with their positions shifted by multiples of the diffrence between the last specified color-stop’s position and the first specfied color-stop’s position.</p>\n<p>  <code class=\"language-text\">repeating-linear-graident(red 10px, blue 50px)</code> is equivalent to <code class=\"language-text\">linear-gradient(..., red -30px, blue 10px, red 10px, blue 50px, red 50px, blue 90px, ...)</code></p>\n<h4>Gradient Color-Stops</h4>\n<p><code class=\"language-text\">&lt;color-stop> = &lt;color> [ &lt;percentage> | &lt;length> ]</code></p>\n<p>Color-stops are points placed along the line defined by the gradient line at the beginning rule.\nAt each color-stop, the line is the color of the color-stop. Betwwen two color-stops, the line’s color is linearly interpolated between the colors of the two color-stops. </p>\n<p>Even if author doesn’t write position, UA set its position corresponding CSS rules</p>\n<h2>CSS &#x3C;=> Object Negotiation</h2>\n<ol>\n<li>When an iamge or object is specified in a document, such as through a <code class=\"language-text\">url()</code> value in a <code class=\"language-text\">background-image</code> property, CSS queries the object for its <em>intrinsic dimensions</em></li>\n<li>CSS then computes a concrete object size using <em>intrinsic dimensions,</em> the specified size. This defines the size and position of the region the object will render in.</li>\n<li>CSS asks the object to render itself at the concrete object size. The object may adjust itselft to match the concrete object size in some way to satisfy sizing constraints of its own, not CSS.</li>\n<li>Unless otherwise specified by CSS, the object is then clipped to the <strong>concrete object size</strong>.</li>\n</ol>\n<h2>Concrete Object Size Resolution</h2>\n<h3>How do UA define <strong>concrete object size</strong>?</h3>\n<ol>\n<li>Default Sizing Algorithm.</li>\n<li>\n<p>Cover and Contain Consraint Sizing.</p>\n<h4>exmaples</h4>\n</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th align=\"left\">property name</th>\n<th align=\"left\">sizing</th>\n<th align=\"left\">default object size</th>\n<th align=\"left\">remarks</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code class=\"language-text\">background-image</code></td>\n<td align=\"left\">default sizing algorithm with no specified size</td>\n<td align=\"left\"></td>\n<td align=\"left\"><code class=\"language-text\">background-size</code> property can give a sizing constraint, invoking either the default sizing algorithm</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"language-text\">list-style-image</code></td>\n<td align=\"left\">default sizing algorithm with no specified size.</td>\n<td align=\"left\">1em square</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"language-text\">border-image</code></td>\n<td align=\"left\">default sizing algorithm</td>\n<td align=\"left\"></td>\n<td align=\"left\">sized twice. tie first sizing operation is defulat sizing algorithm with no specified size, the second operaiton is default sizing algorithm is used to determine an initial size for each slice with the corresponing border image area part</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"language-text\">cursor</code></td>\n<td align=\"left\"></td>\n<td align=\"left\">UA-defined size</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"language-text\">content</code></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\">[CSS21] note tat such anonymous elements have al their non-inherited properties set to their initial value</td>\n</tr>\n</tbody>\n</table>\n<h3><code class=\"language-text\">object-fit</code> property : Sizing Objects</h3>\n<p><code class=\"language-text\">object-fit</code> property specifies how the contents of a replaced element should be fitted to the box stablished by its used height and width. it concerns which object sizing algorithm is used.\nit has smilliar semantics to the SVG11 - <code class=\"language-text\">preserveAspectRatio</code></p>\n<ul>\n<li>value : fill | contain | cover | none | scale-down\n<img src=\"https://user-images.githubusercontent.com/41318449/54081232-7027bb80-4344-11e9-9f9c-59ee1547ca20.png\" alt=\"img_scale\"></li>\n</ul>\n<h3><code class=\"language-text\">object-position</code> property : Positioning Objects.</h3>\n<p><code class=\"language-text\">object-position</code> property determines the alignment of the replaced element inside its box.</p>\n<ul>\n<li>value : &#x3C;position></li>\n</ul>\n<h2>Image Processing</h2>\n<h3><code class=\"language-text\">image-resolution</code> property : Overriding Image Resolutions.</h3>\n<ul>\n<li>image resoltion is defined as the number of image pixels per unit length. Some image formats can record information about the resolution of images. this information can be helpful when determinig the actual size of the image in the formatting process.</li>\n<li><code class=\"language-text\">image-resolution</code> property specifies the intricsic resloution of all raster iamges used in or on the element. If affects both content iages and decorative images.</li>\n<li>\n<p>As vector images such as SVG do not have an intrinsic resolution, this property has no effect on vectior images</p>\n<h4>example</h4>\n<p>Printers tend to have higher resolution than computer motinors. due to this, and iamge that looks fine on the screen may look pixellated when printed out. The <code class=\"language-text\">image-resolution</code> property can be used to embed a high-resolution image into the document and main tain an appropriate size, ensureing attractive display both on screen and on paper</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">@media print(\nimg{\nimage-resolution : 300dpi;\n}</code></pre></div>\n<h3><code class=\"language-text\">image-orientation</code> property : Orienting an Image on the page</h3>\n<p>If a picture is taken with a camera turned on its side, or a document isn’t positioned correctly within a scanner, the resultant image maybe ‘sideways’ or even upside down. The <code class=\"language-text\">image-orientation</code> property provides a way to apply an ‘out-of-band’ rotation to image source data to correctly orient an image. (But it’s not for arbitrary rotation or flipping the image. it should be used to correct incorrectly-oriented images)</p>\n</li>\n<li>value : &#x3C;angle></li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/41318449/54081632-15de2900-434b-11e9-852a-69965f51d2bd.png\" alt=\"image\">\nThe computed value of the property is calculated by rounding the specified angle to the nearest quarter-turn.</p>","frontmatter":{"title":"Study Notes: Reading CSS Image Values and Replaced Content Module Level3","date":"March 10, 2019"}}},"pageContext":{"slug":"/notes-css-images-tae/","previous":{"fields":{"slug":"/notes-mix-blend-mode/"},"frontmatter":{"title":"Study Notes: How I Started Reading `mix-blend-mode` and What They Are Creating with It"}},"next":{"fields":{"slug":"/day-13-14--ticket/"},"frontmatter":{"title":"Days 13 ~ 14: Ticket"}}}},"staticQueryHashes":["2633910083","3128451518","3649515864"]}