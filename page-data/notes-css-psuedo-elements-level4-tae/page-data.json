{"componentChunkName":"component---src-templates-blog-post-js","path":"/notes-css-psuedo-elements-level4-tae/","result":{"data":{"site":{"siteMetadata":{"title":"30 Days of CSS Girls","author":"CodingGirlsSG"}},"markdownRemark":{"id":"04dc2a5c-8d16-529b-8809-57cbf4a2a8c0","excerpt":"Original post by tae: Reading CSS Pseudo-Elements Module Level 4 Reading CSS Pseudo-Elements Module Level 4 that’s little bit long spec… but finally I’ve done…","html":"<p>Original post by <a href=\"https://github.com/Ta2Rim\">tae</a>: <a href=\"https://gist.github.com/Ta2Rim/9bf65384e2683c8e4ed940ffac7f3e70\">Reading CSS Pseudo-Elements Module Level 4</a></p>\n<h1>Reading CSS Pseudo-Elements Module Level 4</h1>\n<p>that’s little bit long spec… but finally I’ve done reading this!!</p>\n<h2>what I newly learned !!!</h2>\n<h3>Typographic Pseudo-elements</h3>\n<p><strong><code class=\"language-text\">::first-line</code></strong></p>\n<ul>\n<li><code class=\"language-text\">::first-line</code> pseudo-element can only have an effect when attached to a block container. (that’s not out-of flow due to floating or positioning)</li>\n<li>fictional tag sequence helps to show how properties are inherited.</li>\n</ul>\n<p><strong><code class=\"language-text\">::first-letter</code></strong></p>\n<ul>\n<li>\n<p><code class=\"language-text\">::first-letter</code> pseudo-element can be used to create ‘initial caps’ and drop caps’</p>\n<ul>\n<li>*dropcap : the first character of the first paragraph is made larger, taking up several lines of text or the first few sentences in typographic effects.</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/41318449/53882058-9dc8e800-4058-11e9-9d48-d9a7dd545fc4.png\" alt=\"1\"></p>\n</li>\n<li>\n<p>basically, UA may calculate how many columns ::first-letter for dropcap expand. with <code class=\"language-text\">initial-letter</code> property, author can choose size of columns.</p>\n<p><img src=\"https://css-tricks.com/wp-content/uploads/2017/01/css-almanac-initial-letter-calculate.gif\" alt=\"2\"></p>\n<p>(Changing the property to occupy 1, 2 and 4 lines)\n** In pervious levels of CSS, User Agents were allowed to choose a line height, width and height based on the shape of the letter. This possibility has been intentionally removed, as it proved to be a poor solution for the intended use case (Drop caps). **</p>\n</li>\n<li>Following additional rules of each languages, <code class=\"language-text\">::first-letter</code> doesn’t mean that ‘ONE’ character. In Dutch, the letter combination IJ appears at the beginning of an element.</li>\n<li>inherit from <code class=\"language-text\">::first-line</code></li>\n<li>For now, <code class=\"language-text\">::first-letter</code> only applies block container desendant</li>\n<li><code class=\"language-text\">p:before { content : 'Note'; }</code>\nIf <code class=\"language-text\">:before</code> element exists, ::first-letter would be ‘N’ of note</li>\n</ul>\n<h3>Highlight Pseudo-elements</h3>\n<ul>\n<li>The UA should use the OS-default highlight colors for <code class=\"language-text\">::selction</code> when neigher <code class=\"language-text\">color</code> nor <code class=\"language-text\">background-color</code> has been specified by the author</li>\n<li>Due to security problem, UA that implement ::spelling-error and ::grammer-error must prevent pages from being able to read the styling of such highlighted segments.</li>\n<li>Priority to paint the highlight : ::grammer-error > ::spelling-error > ::selection</li>\n</ul>\n<p><strong><code class=\"language-text\">::selection</code>, <code class=\"language-text\">::inactive-selection</code></strong></p>\n<ul>\n<li>pseudo-elements represent the portion of a doucment that has been selected as the target or object of some possible future user-agent operations.</li>\n<li><em>Authors wanting multiple selections styles should use <code class=\"language-text\">root::selection</code> for their document-wide selection style. because <code class=\"language-text\">::selection</code> alone applies to every element in the tree (’*’ is implied when a tag selector is missing)</em></li>\n</ul>\n<p><strong><code class=\"language-text\">::spelling-error</code></strong></p>\n<ul>\n<li>pseudo-element represents a portion of text that has been flagged by the user agent as misspelled.</li>\n</ul>\n<p><strong><code class=\"language-text\">::grammer-error</code></strong></p>\n<ul>\n<li>pseudo-element represnets a portion of text that has been flagged by the user agent as grammatically incorrect.</li>\n</ul>\n<h3>Tree-Abiding Pseudo-elements</h3>\n<p>Tree-abiding pseudo-elements always fit within the box tree. They inherit any inheritable properties form their <em>originating element</em></p>\n<p><strong><code class=\"language-text\">::before</code> and <code class=\"language-text\">::after</code></strong></p>\n<ul>\n<li>As with the content of regular elements, the generated content of <code class=\"language-text\">::before</code> and <code class=\"language-text\">::after</code> pseudo-elements may be included in any <code class=\"language-text\">::first-line</code> and <code class=\"language-text\">::first-letter</code> pseudo-elements applied to its <em>originating element</em></li>\n</ul>\n<p><strong><code class=\"language-text\">::marker</code></strong></p>\n<ul>\n<li>The <code class=\"language-text\">::marker</code> pseudo-element represents the automatically generated marker box of a list item. In further CSS, list-item property will be deprecated. only <code class=\"language-text\">::marker</code> properties are allowed.</li>\n</ul>\n<p><strong><code class=\"language-text\">::placeholder</code></strong></p>\n<h3>Specific implementation of CSS Object Model</h3>\n<p>The <em><code class=\"language-text\">CSSPseudoElement</code></em> interface allows pseudo-elements to be event targets.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[Exposed=Window]\ninterface CSSPseudoElement : EventTarget {\n  readonly attribute CSSOMString type;\n  readonly attribute Element element;\n}</code></pre></div>\n<h3>Addition to the Element interface</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">partial interface Element {\n  CSSPseudoElement? pseudo(CSSOMString type)\n};</code></pre></div>\n<p>opposite side</p>\n<h3>Compatibility Syntax</h3>\n<p>For compatibility with existing style sheets written agianst CSS Level 2, UA must also accept the previous one-colon notation. (<code class=\"language-text\">:before</code>, <code class=\"language-text\">:after</code>, <code class=\"language-text\">:first-letter</code>, <code class=\"language-text\">first-line</code>) for the <code class=\"language-text\">::before</code>, <code class=\"language-text\">::after</code>, <code class=\"language-text\">::first-letter</code>, and <code class=\"language-text\">::first-line</code> pseudo-elements</p>\n<h2>Important term</h2>\n<ul>\n<li>Originating Element of Tree-Abiding pseudo-elements</li>\n<li>Fictional tag sequence that causes Overlapping Pseudo-element Interactions</li>\n<li>Compatibility</li>\n</ul>","frontmatter":{"title":"Study Notes: Reading CSS Pseudo-Elements Module Level 4","date":"March 06, 2019"}}},"pageContext":{"slug":"/notes-css-psuedo-elements-level4-tae/","previous":{"fields":{"slug":"/day-9-10--stamp/"},"frontmatter":{"title":"Day 9 ~ 10: CSS Stamp"}},"next":{"fields":{"slug":"/notes-css-selectors-swiftystar4/"},"frontmatter":{"title":"Study Notes: CSS Selectors"}}}},"staticQueryHashes":["2633910083","3128451518","3649515864"]}