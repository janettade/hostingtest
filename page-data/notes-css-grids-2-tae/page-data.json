{"componentChunkName":"component---src-templates-blog-post-js","path":"/notes-css-grids-2-tae/","result":{"data":{"site":{"siteMetadata":{"title":"30 Days of CSS Girls","author":"CodingGirlsSG"}},"markdownRemark":{"id":"bbaf5b4c-0649-5d0b-9f9c-9aae6471e332","excerpt":"Original post by tae: Day 17~18 Reading CSS Grid Layout Module 1 - Chapter 4~6 #TIL : CSS Grid Layout Module 1 Reordering and Accessibility Authors must use…","html":"<p>Original post by <a href=\"https://github.com/Ta2Rim\">tae</a>: <a href=\"https://gist.github.com/Ta2Rim/c1f7f632f2911d6abe00337349944c1c\">Day 17~18 Reading CSS Grid Layout Module 1 - Chapter 4~6</a></p>\n<h1>#TIL : CSS Grid Layout Module 1</h1>\n<h2>Reordering and Accessibility</h2>\n<p><strong>Authors must use ‘order’ and the grid-placement properties only for visual, no logical, reordering of content. Style sheets that use these features to perform logical reordering are non-conforming.</strong></p>\n<h2>Grid Containers</h2>\n<h3>Establishing Grid Containers: the grid and inline-grid display values</h3>\n<p>name : ‘display’\nnew values : grid | inline-grid</p>\n<p><code class=\"language-text\">grid</code> - this value causes an element to generate a block-level grid container box.\n<code class=\"language-text\">inline-grid</code> - this value causes an element to generate an inline-level grid container box.</p>\n<p>A grid container establishes a new grid formatting context for its contents</p>\n<h4>diffrence grid between block layout</h4>\n<ul>\n<li>floats / clear do not intrude into the grid container</li>\n<li>grid container’s margins do not collapse with the margins of its contents.</li>\n<li>vertical-align has no effect on a grid item.</li>\n<li>the ::first-line and ::first-letter pseudo-elements do not apply to grid containers.</li>\n</ul>\n<h3>Sizing Grid Containers</h3>\n<p>A grid container is sized following the rule in which contenxt it is</p>\n<p>The max(min)-content size of a grid container is the sum of the grid container’s track sizes (including gutters) in the appropriate axis, when the grid is sized under a max(min)-content constraint</p>\n<h3>Clamping Overly Large Grids</h3>\n<p>Due to memory limitation, UAs may clamp the possible size according to some rules.</p>\n<ul>\n<li>If the grid area would span outside the limited grid, its span is clamped to the last line of the limited grid.</li>\n<li>If the grid area would be placed completely outside the limited grid, its span must be <em>truncated</em> to 1 and the area repositioned into the last grid track on that side of the grid.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.grid-item {\n  grid-row : 500 / 1500;\n  grid-column : 2000 / 3000;\n}\n\nIf case UA only only supported grids with at most 1000 tracks in each dimesion , UA may : 50 translate it like this.\n\n.grid-item { \n  grid-row : 500 / 1001;\n  grid-column : 1000 / 1001;\n}</code></pre></div>\n<h2>Grid items</h2>\n<p>the grid items of a grid container are boxes representing its in-flow contents.</p>\n<p>grid item - Each in-flow child of a grid container.\neach contiguous sequence of child text runs is wrapped in an anonymous block container grid item. when it contains only white space, it’s instead not rendered.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;div style=\"display: grid\">\n\n    &lt;!-- grid item: block child -->\n    &lt;div id=\"item1\">block&lt;/div>\n\n    &lt;!-- grid item: floated element; floating is ignored -->\n    &lt;div id=\"item2\" style=\"float: left;\">float&lt;/div>\n\n    &lt;!-- grid item: anonymous block box around inline content -->\n    anonymous item 3\n\n    &lt;!-- grid item: inline child -->\n    &lt;span>\n        item 4\n        &lt;!-- grid items do not split around blocks -->\n        &lt;q style=\"display: block\" id=not-an-item>item 4&lt;/q>\n        item 4\n    &lt;/span>\n&lt;/div></code></pre></div>\n<p>When you remove text ‘anonymous item 3’, You can find out that inter-element white space disappears.</p>\n<h3>Grid Item Display</h3>\n<p>The display value of a grid item is blockified: if the specified display of an in-flow child of an element generating a grid container is an inline-level value, it computes to its block-level equivalent.</p>\n<h3>Grid Item Sizing</h3>\n<p>Grid item calculations for auto widths and heights vary by their self-alignment values:\n| alignment |\tNon-replaced Element Size\t| Replaced Element Size\t |\n|:--------|:--------|:--------|\n| <code class=\"language-text\">normal</code> | Fill grid area |  Use intrinsic size |\n| <code class=\"language-text\">stretch</code> | Fill grid area | Fill grid area |\n| <code class=\"language-text\">start</code>,<code class=\"language-text\">center</code>,etc | ‘fit-content’ sizing (like floats) | Use intrinsic size |</p>\n<h3>the <code class=\"language-text\">order</code> property : Reordered Grid Items</h3>\n<p><strong>As with reordering flex items, the order property must only be used when the visual order needs to be out-of-sync with the speech and navigation order; otherwise the underlying document source should be reordered instead.</strong></p>\n<h3><em>Grid Item Margins and Paddings</em></h3>\n<p>Percentage margins and paddings on grid items can be resolved against either:</p>\n<ul>\n<li>their own axis (left/right percentages resolve against width, top/bottom resolve against height)</li>\n<li>the inline axis (left/right/top/bottom percentages all resolve against width)\nA User Agent choose one of these two behaviors, so authors are aware of each UAs’ different behavior. should avoid using percentages in paddings or margins on grid items entirely</li>\n</ul>\n<h3>the <code class=\"language-text\">z-index</code> property : Z-axis Ordering</h3>\n<p>The painting order of grid items is exactly the same as inline blocks</p>\n<p>except that order-modified document order is used in place of raw document order, and z-index values other than auto create a stacking context even if position is static (behaving exactly as if position were relative).</p>\n<p>Thus the z-index property can easily be used to control the z-axis order of grid items.</p>\n<h3>Automatic Minimum Size of Grid Items</h3>\n<p>The automatic minimum size for a grid item in a given dimension is its specified size if it exists, otherwise its transferred size if that exists, else its content size.</p>\n<h2>What’s more?</h2>\n<p><a href=\"https://en.wikipedia.org/wiki/Holy_grail_(web_design)\">Holy Grail Layout</a></p>","frontmatter":{"title":"Study Notes: CSS Grid Layout Module 1 - Chapter 4~6","date":"March 16, 2019"}}},"pageContext":{"slug":"/notes-css-grids-2-tae/","previous":{"fields":{"slug":"/day-17-18--autofilling-grid/"},"frontmatter":{"title":"Days 17 ~ 18: Cards"}},"next":{"fields":{"slug":"/day-19-20--grid-pattern/"},"frontmatter":{"title":"Days 19 ~ 20: Grid Patterns"}}}},"staticQueryHashes":["2633910083","3128451518","3649515864"]}