{"componentChunkName":"component---src-templates-blog-post-js","path":"/notes-css-grids-3-tae/","result":{"data":{"site":{"siteMetadata":{"title":"30 Days of CSS Girls","author":"CodingGirlsSG"}},"markdownRemark":{"id":"2ed16609-cc57-54df-9d6a-0ec39539b5d7","excerpt":"Original post by tae: Day 19~20 Reading CSS Grid Layout Module 1 - Chapter 7~8 #TIL - Reading CSS Grid Layout Module 1 - Chapter 7~8 Grid consists of two area…","html":"<p>Original post by <a href=\"https://github.com/Ta2Rim\">tae</a>: <a href=\"https://gist.github.com/Ta2Rim/47305c247c11c1e7e8d1a1e01f559ba9\">Day 19~20 Reading CSS Grid Layout Module 1 - Chapter 7~8</a></p>\n<h1>#TIL - Reading CSS Grid Layout Module 1 - Chapter 7~8</h1>\n<p>Grid consists of two area, <strong>Explicit Grid</strong> and <strong>Implicit Grid</strong></p>\n<p>The three properties <code class=\"language-text\">grid-template-rows</code>, <code class=\"language-text\">grid-template-columns</code>, and <code class=\"language-text\">grid-template-areas</code> together define the explicit grid of a grid container.</p>\n<p>The final grid may end up larger due to grid items placed outside the explicit grid; in this case implicit tracks will be created, these implicit tracks will be sized by the <code class=\"language-text\">grid-auto-rows</code> and <code class=\"language-text\">grid-auto-columns</code> properties.</p>\n<p>There’re a lot of ways to use grid style.</p>\n<h2>Explict Grid</h2>\n<h3>Explicit Track Sizing: the <code class=\"language-text\">grid-template-rows</code> and <code class=\"language-text\">grid-template-columns</code> properties</h3>\n<p>These properties specify, as a space-separated track list, the line names and track sizing functions of the grid.\nthese properties determine Explicit grid area.</p>\n<p>Authors also can name grid lines with the <code class=\"language-text\">[&lt;custom-ident>*]</code> syntax</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  #grid { \n    display : grid;\n    grid-template-columns : [first nav-start] 150px [main-start] 1fr [last]; /*the ident that has space means that line has multiple names.*/\n    grid-template-rows: [first header-start] 50px [main-start] 1fr [footer-start] 50px [last];\n  }</code></pre></div>\n<p><img src=\"https://user-images.githubusercontent.com/41318449/54618029-ad5b1e80-4aa5-11e9-8319-e545a2612df5.png\" alt=\"grid-named-lines\"></p>\n<p>with <code class=\"language-text\">repeat()</code> notation, authors don’t need to write down repeted fragment.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  grid-template-columns: 10px [col-start] 250px [col-end]\n                         10px [col-start] 250px [col-end]\n                         10px [col-start] 250px [col-end]\n                         10px [col-start] 250px [col-end] 10px;\n  /* same as above, except easier to write */\n  grid-template-columns: repeat(4, 10px [col-start] 250px [col-end]) 10px;</code></pre></div>\n<p>Authors may not be able to know how much area will remain, then use <code class=\"language-text\">auto-fill</code> and <code class=\"language-text\">auto-fit</code> repetitions</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.wrapper {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, 200px);\n}</code></pre></div>\n<p>In this example, the following code will create 200px grids that can fill columns</p>\n<p>The auto-fit keyword behaves the same as auto-fill, except that after grid item placement any empty repeated tracks are collapsed. </p>\n<p>these two properties are resolved value special case properties. [CSSOM]\nIt means, authors can access to these values with js.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;script>\n  var gridElement = document.getElementById(\"grid\");\n  getComputedStyle(gridElement).gridTemplateColumns;\n  // [a] 50px [b] 320px [b c d] repeat(2, [e] 40px) repeat(4, 0px) 50px\n&lt;/script></code></pre></div>\n<h3>Named Areas: the <code class=\"language-text\">grid-template-areas</code> property</h3>\n<p>This property specifies named grid areas, which are not associated with any particular grid item, but can be referenced from the grid-placement properties.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">#grid {\n  display: grid;\n  grid-template-areas: \"head head\"\n                       \"nav  main\"\n                       \"foot ....\"\n}\n#grid > header { grid-area: head; }\n#grid > nav    { grid-area: nav; }\n#grid > main   { grid-area: main; }\n#grid > footer { grid-area: foot; }</code></pre></div>\n<p>this property creates implicit named lines from the named grid areas in the template. </p>\n<h2>the <code class=\"language-text\">grid-template</code> property : Explicit Grid Shorthand</h2>\n<p>The grid-template property is a shorthand for setting grid-template-columns, grid-template-rows, and grid-template-areas in a single declaration. </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">grid-template: auto 1fr / auto 1fr auto;\n/*is equivalent to*/\n\ngrid-template-rows: auto 1fr;\ngrid-template-columns: auto 1fr auto;\ngrid-template-areas: none;\n\ngrid-template: [header-top] \"a   a   a\"     [header-bottom]\n                 [main-top] \"b   b   b\" 1fr [main-bottom]\n                          / auto 1fr auto;\n/*is equivalent to*/\ngrid-template-areas: \"a a a\"\n                     \"b b b\";\ngrid-template-rows: [header-top] auto [header-bottom main-top] 1fr [main-bottom];\ngrid-template-columns: auto 1fr auto;\n                          </code></pre></div>\n<h2>Implicit Grid</h2>\n<p>Simply, it’s area that outside of explicit grid bound. Implict Grid is set by 3 properties : <code class=\"language-text\">grid-auto-rows</code>, <code class=\"language-text\">grid-auto-columns</code>, <code class=\"language-text\">grid-auto-flow</code>. also grid shorthand affects, too.</p>\n<h3>the <code class=\"language-text\">grid-auto-rows</code> and <code class=\"language-text\">grid-auto-columns</code> properties :Implicit Track Sizing</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;style>\n  #grid {\n    display: grid;\n    grid-template-columns: 20px;\n    grid-auto-columns: 40px;\n    grid-template-rows: 20px;\n    grid-auto-rows: 40px;\n  }\n  #A { grid-column: 1; grid-row: 1; }\n  #B { grid-column: 2; grid-row: 1; }\n  #C { grid-column: 1; grid-row: 2; }\n  #D { grid-column: 2; grid-row: 2; }\n&lt;/style>\n\n&lt;div id=\"grid\">\n  &lt;div id=\"A\">A&lt;/div>\n  &lt;div id=\"B\">B&lt;/div>\n  &lt;div id=\"C\">C&lt;/div>\n  &lt;div id=\"D\">D&lt;/div>\n&lt;/div></code></pre></div>\n<p><img src=\"https://user-images.githubusercontent.com/41318449/54620703-e85f5100-4aa9-11e9-968c-31d56641c37a.png\" alt=\"image\"></p>\n<h3>the <code class=\"language-text\">grid-auto-flow</code> property | Automatic Placement</h3>\n<p>Value : [ row | column ] || dense</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  grid-auto-flow: row dense;</code></pre></div>\n<ul>\n<li>dense : If specified, the auto-placement algorithm uses a “dense” packing algorithm, which attempts to fill in holes earlier in the grid if smaller items come up later.</li>\n</ul>\n<h1>Placing Grid Items</h1>\n<ul>\n<li><strong>grid position</strong> : The grid item’s location in the grid in each axis. A grid position can be either definite (explicitly specified) or automatic (determined by auto-placement).</li>\n<li><strong>grid span</strong> : How many grid tracks the grid item occupies in each axis. A grid item’s grid span is always definite, defaulting to 1 in each axis if it can’t be otherwise determined for that axis.</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/41318449/54621796-b222d100-4aab-11e9-8ba7-a3353738ec99.png\" alt=\"image\"></p>\n<p>The grid-placement property longhands are organized into three shorthands</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  /* 1. Named-area */\n  article.one {\n    grid-area: main;\n    /* Places item into the named area \"main\". */\n  }\n\n  /* 2. Numeric Indexes and Spans */\n  article.two {\n    grid-row: 2 / span 5;\n    /* Starts in the 2nd row,\n     spans 5 rows down (ending in the 7th row). */\n  }\n  \n  /* 3. Named Lines and Spans */\n  article.three {\n    grid-row: text 5 / span text 2;\n    /* Same as grid-row: text 5 / text 7; - start at the 5th line named \"text\",\n       then span across two more \"text\" lines, to the 7th. */\n  }\n  \n  /* 4.Auto Placement */\n  article.four {\n    grid-area: auto; /* Initial value */\n  }\n  article.five {\n    grid-area: span 2 / span 3;\n    /* Auto-placed item, covering two rows and three columns. */\n  }</code></pre></div>\n<p><strong><em>grid-placement properties are not a substitute for correct source ordering.</em></strong></p>\n<h3>the <code class=\"language-text\">grid-row-start</code>, <code class=\"language-text\">grid-column-start</code>, <code class=\"language-text\">grid-row-end</code>, and <code class=\"language-text\">grid-column-end</code> properties : Line-based Placement</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Value:\t&lt;grid-line>\n  \n  &lt;grid-line> =\n  auto |\n  &lt;custom-ident> |\n  [ &lt;integer> &amp;&amp; &lt;custom-ident>? ] |\n  [ span &amp;&amp; [ &lt;integer> || &lt;custom-ident> ] ]</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Given a single-row, 8-column grid and the following 9 named lines:\n1  2  3  4  5  6  7  8  9\n+--+--+--+--+--+--+--+--+\n|  |  |  |  |  |  |  |  |\nA  B  C  A  B  C  A  B  C\n|  |  |  |  |  |  |  |  |\n+--+--+--+--+--+--+--+--+\nThe following declarations place the grid item between the lines indicated by index:\n\ngrid-column-start: 4; grid-column-end: auto;\n/* Line 4 to line 5 */\n\ngrid-column-start: auto; grid-column-end: 6;\n/* Line 5 to line 6 */\n\ngrid-column-start: C; grid-column-end: C -1;\n/* Line 3 to line 9 */\n\ngrid-column-start: C; grid-column-end: span C;\n/* Line 3 to line 6 */\n\ngrid-column-start: span C; grid-column-end: C -1;\n/* Line 6 to line 9 */\n\ngrid-column-start: span C; grid-column-end: span C;\n/* Error: The end span is ignored, and an auto-placed\n   item can’t span to a named line.\n   Equivalent to grid-column: span 1;. */\n\ngrid-column-start: 5; grid-column-end: C -1;\n/* Line 5 to line 9 */\n\ngrid-column-start: 5; grid-column-end: span C;\n/* Line 5 to line 6 */\n\ngrid-column-start: 8; grid-column-end: 8;\n/* Error: line 8 to line 9 */\n\ngrid-column-start: B 2; grid-column-end: span 1;\n/* Line 5 to line 6 */</code></pre></div>\n<h3><strong>* Grid Item Placement Algorithm *</strong></h3>\n<ol start=\"0\">\n<li>Generate anonymous grid items</li>\n<li>Position anything that’s not auto-positioned.</li>\n<li>Process the items locked to a given row. - through sparse/dense packing</li>\n<li>\n<p>Determine the columns in the implicit grid.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">#grid {\ndisplay: grid;\ngrid-template-columns: repeat(5, 100px);\ngrid-auto-flow: row;\n}\n#grid-item {\ngrid-column: 4 / span 3;\n}\nThe number of columns needed is 6. The explicit grid provides its 5 columns (from grid-template-columns) with lines number 1 through 6, but #grid-item’s column position means it ends on line 7, which requires an additional column added to the end of the implicit grid.</code></pre></div>\n</li>\n<li>Position the remaining grid items.</li>\n</ol>\n<h2>What’s more?</h2>\n<h3>the <code class=\"language-text\">fr</code> unit - flexible lenghts</h3>\n<p>A flexible length or <code class=\"language-text\">&lt;flex></code> is a dimension with the <code class=\"language-text\">fr</code> unit, which represents a fraction of the leftover space in the grid container.</p>","frontmatter":{"title":"Study Notes: CSS Grid Layout Module 1 - Chapter 7~8","date":"March 19, 2019"}}},"pageContext":{"slug":"/notes-css-grids-3-tae/","previous":{"fields":{"slug":"/day-19-20--grid-pattern/"},"frontmatter":{"title":"Days 19 ~ 20: Grid Patterns"}},"next":{"fields":{"slug":"/day-21-22--layout-with-grid/"},"frontmatter":{"title":"Days 21 ~ 22: Layout with Grid"}}}},"staticQueryHashes":["2633910083","3128451518","3649515864"]}