<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[30 Days of CSS Girls]]></title><description><![CDATA[Css with CodingGirls :)]]></description><link>http://css.codinggirls.sg</link><generator>GatsbyJS</generator><lastBuildDate>Tue, 10 Oct 2023 10:59:10 GMT</lastBuildDate><item><title><![CDATA[Days 29 ~ 30: Bézier Curves]]></title><description><![CDATA[Bézier Curves Ever dreaded about writing ?
Great, so did I! Turns out that’s CSS’ attempt to resemble real world physics to its best effort…]]></description><link>http://css.codinggirls.sg/day-29-30--bezier-curve/</link><guid isPermaLink="false">http://css.codinggirls.sg/day-29-30--bezier-curve/</guid><pubDate>Fri, 29 Mar 2019 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;Bézier Curves&lt;/h1&gt;
&lt;p&gt;Ever dreaded about writing &lt;code class=&quot;language-text&quot;&gt;cubic-bezier(x1, y1, x2, y2)&lt;/code&gt;?
Great, so did I!&lt;/p&gt;
&lt;p&gt;Turns out that’s CSS’ attempt to resemble real world physics to its best effort.
And it’s actually very effective.
The &lt;a href=&quot;https://en.wikipedia.org/wiki/B%C3%A9zier_curve&quot;&gt;Bézier Curves&lt;/a&gt; are commonly used in computer graphics to simulate curves.
And that includes the hyperbolas — the curve along which objects move when you throw something into the air.&lt;/p&gt;
&lt;p&gt;As a passionate front end developer, we thrive to recreate those animations as real as possible.
Human eyes are sensitive.
Even if things may be just slightly off, your audience will just “feel weird” even if they may not be able to tell why.&lt;/p&gt;
&lt;p&gt;We’ll need to humbly learn from the great beautiful nature when we code :)&lt;/p&gt;
&lt;h2&gt;Objective&lt;/h2&gt;
&lt;p&gt;Let’s try implementing the animation in this design!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.dribbble.com/users/501822/screenshots/4941238/dribbble_1__1_.gif&quot;&gt;&lt;/p&gt;
&lt;p&gt;Original design: &lt;a href=&quot;https://dribbble.com/shots/4941238-One-Minimal-Festival-Homepage-Alternative-Version-Animation&quot;&gt;One Minimal Festival Homepage Alternative Version Animation&lt;/a&gt; by &lt;a href=&quot;https://dribbble.com/Zhenya_Artem&quot;&gt;Zhenya Rynzhuk&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Reading&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.w3.org/TR/css-animations-1/&quot;&gt;CSS Animations Level 1&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Further&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://dev.to/wgao19/understanding-the-bzier-curves--59ep&quot;&gt;Here&lt;/a&gt;’s a blog article I wrote about Bézier Curves, mainly about the intuition.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Days 27 ~ 28: Water Wave]]></title><description><![CDATA[Water Wave Remember that hypnotic background we created on day 11?
Let’s animate it! Objective Implement the animation for Hypnotic…]]></description><link>http://css.codinggirls.sg/day-27-28--water-wave/</link><guid isPermaLink="false">http://css.codinggirls.sg/day-27-28--water-wave/</guid><pubDate>Wed, 27 Mar 2019 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;Water Wave&lt;/h1&gt;
&lt;p&gt;Remember that hypnotic background we created &lt;a href=&quot;../day-11-12--repeating-gradient&quot;&gt;on day 11&lt;/a&gt;?
Let’s animate it!&lt;/p&gt;
&lt;h2&gt;Objective&lt;/h2&gt;
&lt;p&gt;Implement the animation for &lt;a href=&quot;https://dribbble.com/shots/2859124-DCX-Hypnotic-Background&quot;&gt;Hypnotic Background&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.dribbble.com/users/90923/screenshots/2859124/dcx-hypno.gif&quot;&gt;&lt;/p&gt;
&lt;p&gt;Original design: &lt;a href=&quot;https://dribbble.com/shots/2859124-DCX-Hypnotic-Background&quot;&gt;DCX - Hypnotic Background&lt;/a&gt; by &lt;a href=&quot;https://dribbble.com/ndimatteo&quot;&gt;Nick DiMatteo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://codepen.io/wgao19/pen/XoyLpp&quot;&gt;&lt;div&gt;&lt;iframe 
        height=&apos;400&apos; 
        scrolling=&apos;no&apos; 
        src=&apos;//codepen.io/wgao19/embed/preview/XoyLpp/?height=400&amp;theme-id=dark&amp;default-tab=html,result&apos; 
        frameborder=&apos;no&apos; 
        allowtransparency=&apos;true&apos; 
        allowfullscreen=&apos;true&apos; 
        style=&apos;width: 100%;&apos;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Not easy eh! But super fun.&lt;/p&gt;
&lt;h2&gt;Reading&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.w3.org/TR/css-transitions-1/&quot;&gt;CSS Transitions Level 1&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Study Notes: Reading CSS Transitions Level 1]]></title><description><![CDATA[Original post by tae: Reading CSS Transitions Level 1 #TIL - Reading CSS Transitions Level 1 Introduction new CSS features to enable…]]></description><link>http://css.codinggirls.sg/notes-css-transition-tae/</link><guid isPermaLink="false">http://css.codinggirls.sg/notes-css-transition-tae/</guid><pubDate>Wed, 27 Mar 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Original post by &lt;a href=&quot;https://github.com/Ta2Rim&quot;&gt;tae&lt;/a&gt;: &lt;a href=&quot;https://gist.github.com/Ta2Rim/d110f5e6429870cea83748f5124501ac&quot;&gt;Reading CSS Transitions Level 1&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;#TIL - Reading CSS Transitions Level 1&lt;/h1&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;new CSS features to enable implicit transitions, that describe how CSS properties can be made to change smoothly from one value to another over a given duration.&lt;/p&gt;
&lt;h2&gt;Transition&lt;/h2&gt;
&lt;p&gt;the UA must calculate its used value by repeating the list of values until there are enough. that behavior is analogous to behavior of the &lt;code class=&quot;language-text&quot;&gt;background-*&lt;/code&gt; properties.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt; div {
  transition-property : opacity, left, top, width;
  transition-duration: 2s, 1s;
 }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;code class=&quot;language-text&quot;&gt;transition-property&lt;/code&gt; Property&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Name : &lt;code class=&quot;language-text&quot;&gt;transition-property&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Value : none | &lt;single-transition-property&gt;#&lt;/li&gt;
&lt;li&gt;Initial : all&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;single-transition-property&gt; = all | &amp;lt;custom-ident&gt;;&lt;/code&gt;
it specifies the name of the CSS property to which the transition is applied&lt;/p&gt;
&lt;h3&gt;&lt;code class=&quot;language-text&quot;&gt;transition-duration&lt;/code&gt; Property&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Name : &lt;code class=&quot;language-text&quot;&gt;transition-duration&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Value : &lt;code class=&quot;language-text&quot;&gt;&amp;lt;time&gt;&lt;/code&gt;#
it specifies how long the transition form the old value to the new value should take.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;code class=&quot;language-text&quot;&gt;transition-timimg-function&lt;/code&gt; Property (Easing Function)&lt;/h3&gt;
&lt;p&gt;it describes how the intermediate values used during a transition will be calculated.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Name : &lt;code class=&quot;language-text&quot;&gt;transition-timimg-function&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Value : &lt;code class=&quot;language-text&quot;&gt;&amp;lt;timing-function&gt;&lt;/code&gt;#&lt;/li&gt;
&lt;li&gt;Initial : &lt;code class=&quot;language-text&quot;&gt;ease&lt;/code&gt;
Timing functions are defined in te separate (CSS Easing functions module.): [https://www.w3.org/TR/css-easing-1/]&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;code class=&quot;language-text&quot;&gt;transition-delay&lt;/code&gt; Property&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Name : &lt;code class=&quot;language-text&quot;&gt;transition-delay&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Value : &lt;code class=&quot;language-text&quot;&gt;&amp;lt;time&gt;&lt;/code&gt;#
It defines when the transition will start.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;code class=&quot;language-text&quot;&gt;transition&lt;/code&gt; Shorthand Property&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Name : &lt;code class=&quot;language-text&quot;&gt;transition&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Value : &lt;code class=&quot;language-text&quot;&gt;&amp;lt;single-transition&gt;#&lt;/code&gt;
&lt;code class=&quot;language-text&quot;&gt;&amp;lt;single-transition&gt; = [ none | &amp;lt;single-transition-property&gt; ] || &amp;lt;time&gt; || &amp;lt;timimg-function&gt; || &amp;lt;time&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Implementations - .;(… it’s difficult to me I’ve read this 5 times but I can’t get it right. I guess this section is for UA implementors&lt;/h2&gt;
&lt;p&gt;Implementations must maintain a set of &lt;em&gt;running transitions&lt;/em&gt; and &lt;em&gt;completed transitions&lt;/em&gt;
This specification maintins the invariant that there is never both a running transition and a completed transition for the same property and element.&lt;/p&gt;
&lt;p&gt;Each of these transitions also has a &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;start time&lt;/li&gt;
&lt;li&gt;end time&lt;/li&gt;
&lt;li&gt;start value&lt;/li&gt;
&lt;li&gt;end value&lt;/li&gt;
&lt;li&gt;reversing-adjusted start value&lt;/li&gt;
&lt;li&gt;revesing shortening factor&lt;/li&gt;
&lt;li&gt;&lt;em&gt;style change event&lt;/em&gt; : the simultaneous style changes that is caused by updating computed value&lt;/li&gt;
&lt;li&gt;&lt;em&gt;before-change style&lt;/em&gt; : If an element is not in the doucment during that style schange event, then transitions are not started. to avoid it, author can define the before-change style. except with any styles derived form declarative animatioons.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;after-change style&lt;/em&gt; : single change can start a transition on the same property when a property change is inherited form one element with &lt;code class=&quot;language-text&quot;&gt;transition-*&lt;/code&gt; properties&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;matching transiton-property value&lt;/em&gt; : each element with a &lt;code class=&quot;language-text&quot;&gt;before-change style&lt;/code&gt; and an &lt;code class=&quot;language-text&quot;&gt;after change style&lt;/code&gt; and each property define that &lt;code class=&quot;language-text&quot;&gt;matching transtion-property&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;When comparing the &lt;code class=&quot;language-text&quot;&gt;before-change&lt;/code&gt; style and &lt;code class=&quot;language-text&quot;&gt;after-change style&lt;/code&gt; for a given property, the property values are &lt;strong&gt;transitionable&lt;/strong&gt; if the have an animation type that is neither not animatable nor discrete.&lt;/p&gt;
&lt;p&gt;another rule : &lt;code class=&quot;language-text&quot;&gt;transition-*&lt;/code&gt; properties changes at the same time as a property whose change might transition.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;li {
 transition : background-color linear 1s;
 background: blue;
}
li:hover {
 background-color : green;
 transition-duration : 2s; /* the transition caused hovered &amp;lt;li&gt;, it takes 2s */
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Applicaiton of transitions&lt;/h2&gt;
&lt;p&gt;Implementations must add&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;computed values resulting from CSS transitions can inherit to descentdants just like any other computed values.&lt;/li&gt;
&lt;li&gt;this value to the cascade if and only if that property is not currently undergoing a CSS Animation on the same Element.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;during the duration phase of the trasition, the current value is a specified style that will compute to the result of interpolating propert using the following values.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Vα : start value of the transition&lt;/li&gt;
&lt;li&gt;Vβ : end value of the transition&lt;/li&gt;
&lt;li&gt;p : the output of the timimg function for input ( current time - start time ) / (end time - start time)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Completion of transtions&lt;/h2&gt;
&lt;p&gt;Running transitions complete at a time that is equal to or after their end time. When a transition completes, implementations must move all transitions that complete at that time from the set of running transitions to the set of completed transitions and then &lt;em&gt;fire the events&lt;/em&gt;(relates to transition events) for those completions.&lt;/p&gt;
&lt;h2&gt;Transition Events&lt;/h2&gt;
&lt;p&gt;The creation, beginning, and cancellation of CSS transitions generate corresponding DOM Events.
transtion event handlers must be supported by all HTML elements, event handler content attributes and event handler IDL attributes must be supported by all &lt;code class=&quot;language-text&quot;&gt;Document&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;Window&lt;/code&gt; objects.&lt;/p&gt;
&lt;p&gt;transition event browser implementations for now
– chrome, safari: webkitTransitionEnd
– opera 10.5: oTransitionEnd
– opera 12: otransitionend
– opera 12.10: transitionend
– standard, firefox, ie10+: transitionEnd&lt;/p&gt;
&lt;h2&gt;Security Considerations&lt;/h2&gt;
&lt;p&gt;Implementations should take care to ensure that Web content cannot trigger unsafe out-of-memory handling by using large numbers of animations or animations on elements covering large areas(such as &lt;code class=&quot;language-text&quot;&gt;transform&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;opacity&lt;/code&gt;)&lt;/p&gt;
&lt;h2&gt;Privacy Considerations&lt;/h2&gt;
&lt;p&gt;users who would benefit from these mitigations may face a tradeoff between keeping their disability private form the Web content or benefiting form the mitigation.&lt;/p&gt;
&lt;h2&gt;Accessibility Considerations&lt;/h2&gt;
&lt;p&gt;Implemetations may provide mitigations to help users with disabilities.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Motion : Providing a declarative mechanism : to be easier to make, for user agents to modify those animations if such modifications are needed to meet a user’s accessibility needs.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;UA implementors should be aware that Web content may depend on the firing of transition events. so implemations avoid to fire transition events even if the transitions were not run as continuous animations.&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Cascade
The cascade also allows users to disable transtions entirely by overriding the transition properties.&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[Study Notes: Reading CSS Flex Layout Module 1 - Chapter 7~8]]></title><description><![CDATA[Original post by tae: Reading CSS Flex Layout Module 1 - Chapter 7~8 TIL - Reading CSS Flex Layout Module 1 - Chapter 7~8 Flexibility A flex…]]></description><link>http://css.codinggirls.sg/notes-css-flex-2-tae/</link><guid isPermaLink="false">http://css.codinggirls.sg/notes-css-flex-2-tae/</guid><pubDate>Tue, 26 Mar 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Original post by &lt;a href=&quot;https://github.com/Ta2Rim&quot;&gt;tae&lt;/a&gt;: &lt;a href=&quot;https://gist.github.com/Ta2Rim/fe873dcf3eadb53e2f6d8f63077dc77d&quot;&gt;Reading CSS Flex Layout Module 1 - Chapter 7~8&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;TIL - Reading CSS Flex Layout Module 1 - Chapter 7~8&lt;/h1&gt;
&lt;h2&gt;Flexibility&lt;/h2&gt;
&lt;p&gt;A flex ontainer distributes free space to its items to fill the container, or shirinks them to prevent overflow with &lt;code class=&quot;language-text&quot;&gt;flex&lt;/code&gt; properties&lt;/p&gt;
&lt;h3&gt;The &lt;code class=&quot;language-text&quot;&gt;flex&lt;/code&gt; Shorthand&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Name : &lt;code class=&quot;language-text&quot;&gt;flex&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Value : none | [&amp;#x3C;&lt;code class=&quot;language-text&quot;&gt;flex-grow&lt;/code&gt;&gt; &amp;#x3C;&lt;code class=&quot;language-text&quot;&gt;&apos;flex-shirk&lt;/code&gt;&gt;? || &amp;#x3C;&lt;code class=&quot;language-text&quot;&gt;flex-basis&lt;/code&gt;&gt; ]&lt;/li&gt;
&lt;li&gt;Initial : 0 1 auto&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;flex factors&lt;/code&gt; = &lt;code class=&quot;language-text&quot;&gt;flex grow and shrink&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Authors are encouraged to control flexibillity using the &lt;code class=&quot;language-text&quot;&gt;flex&lt;/code&gt; shorthand rather than with its longhand properties directly, as the shorthand correctly resets any unspecified components to accommodate common uses&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;flex-grow&gt;&lt;/code&gt; : this &lt;number&gt; component sets &lt;code class=&quot;language-text&quot;&gt;flex-grow&lt;/code&gt; longhand and specifies the flex grow factor, which determines how much the flex item will grow reltive to the rest of the flex items in the flex container when positive free space is distributed.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;flex-shrink&gt;&lt;/code&gt; : this &lt;number&gt; component sets &lt;code class=&quot;language-text&quot;&gt;flex-shrink&lt;/code&gt; longhand and specifies the flex shirnk factor which determines how much the flex item will shrink relative to the rest of the flex items in the flex container when negative free space is distributed.
&lt;em&gt;small item won’t shirnk to zero before a larger item has been noticeably reduced&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;flex-basis&gt;&lt;/code&gt; : the inital main size of the flex item, before free space is distributed according to the flex factors.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Value : &lt;code class=&quot;language-text&quot;&gt;auto&lt;/code&gt; | &lt;code class=&quot;language-text&quot;&gt;content&lt;/code&gt; | &lt;code class=&quot;language-text&quot;&gt;&amp;lt;width&gt;&lt;/code&gt; | &lt;code class=&quot;language-text&quot;&gt;none&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By default, flex items won’t shrink below their minimum content size. To change this, set the &lt;code class=&quot;language-text&quot;&gt;min-width&lt;/code&gt; or &lt;code class=&quot;language-text&quot;&gt;min-height&lt;/code&gt; property&lt;/p&gt;
&lt;h2&gt;Alignment&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;margin&lt;/code&gt; in flex layout is powerful than what margins can do in block layout&lt;/p&gt;
&lt;h3&gt;Alignning with &lt;code class=&quot;language-text&quot;&gt;auto&lt;/code&gt; margins&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;During calculations of flex bases and flexible lengths, auto margins in block flow:&lt;/li&gt;
&lt;li&gt;Prior to alignment via &lt;code class=&quot;language-text&quot;&gt;justify-content&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;align-self&lt;/code&gt;, any positive free space is distributed to auto margins in that dimension.&lt;/li&gt;
&lt;li&gt;Overflowing boxes ignore their auto margins and overflow in the end direction.
&lt;em&gt;if free space is distributed to auto margins. the alignment properties will have no effect in that dimension because the margins will have stolen all the free space left over after flexing&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Main Axis Alignment : the &lt;code class=&quot;language-text&quot;&gt;justify-content&lt;/code&gt; property&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Value : &lt;code class=&quot;language-text&quot;&gt;flex-start&lt;/code&gt; | &lt;code class=&quot;language-text&quot;&gt;flex-end&lt;/code&gt; | &lt;code class=&quot;language-text&quot;&gt;center&lt;/code&gt; | &lt;code class=&quot;language-text&quot;&gt;space-between&lt;/code&gt; | &lt;code class=&quot;language-text&quot;&gt;space-around&lt;/code&gt;
It aligns flex items along the main axis of the current line of the flex container. This is done after any flexible lengths and any auto margins have been resolved.
&lt;img src=&quot;https://user-images.githubusercontent.com/41318449/55010807-3b944f00-5028-11e9-9ef2-968ca852779a.png&quot; alt=&quot;image&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Cross Axis Alignment : the &lt;code class=&quot;language-text&quot;&gt;align-items&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;align-self&lt;/code&gt; property&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Name : &lt;code class=&quot;language-text&quot;&gt;align-items&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Value : &lt;code class=&quot;language-text&quot;&gt;flex-start&lt;/code&gt; | &lt;code class=&quot;language-text&quot;&gt;flex-end&lt;/code&gt; | &lt;code class=&quot;language-text&quot;&gt;center&lt;/code&gt; | &lt;code class=&quot;language-text&quot;&gt;baseline&lt;/code&gt; | &lt;code class=&quot;language-text&quot;&gt;stretch&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Initial : &lt;code class=&quot;language-text&quot;&gt;stretch&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;align-items&lt;/code&gt; sets the default alignment for all of the flex container’s items, including anonymous flex items.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Name : &lt;code class=&quot;language-text&quot;&gt;align-self&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Value : &lt;code class=&quot;language-text&quot;&gt;flex-start&lt;/code&gt; | &lt;code class=&quot;language-text&quot;&gt;flex-end&lt;/code&gt; | &lt;code class=&quot;language-text&quot;&gt;center&lt;/code&gt; | &lt;code class=&quot;language-text&quot;&gt;baseline&lt;/code&gt; | &lt;code class=&quot;language-text&quot;&gt;stretch&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Initial : &lt;code class=&quot;language-text&quot;&gt;auto&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;align-self&lt;/code&gt; allows this default alignment to be overridden for individual flex items.
&lt;img src=&quot;https://user-images.githubusercontent.com/41318449/55011244-f9b7d880-5028-11e9-8737-69dbeaa24e2c.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;h3&gt;Packing Flex Lines : the &lt;code class=&quot;language-text&quot;&gt;align-content&lt;/code&gt; property&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Name : &lt;code class=&quot;language-text&quot;&gt;align-content&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Value : &lt;code class=&quot;language-text&quot;&gt;flex-start&lt;/code&gt; | &lt;code class=&quot;language-text&quot;&gt;flex-end&lt;/code&gt; | &lt;code class=&quot;language-text&quot;&gt;center&lt;/code&gt; | &lt;code class=&quot;language-text&quot;&gt;space-between&lt;/code&gt; | &lt;code class=&quot;language-text&quot;&gt;space-around&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Initial : &lt;code class=&quot;language-text&quot;&gt;stretch&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Applies to : multi-line flex containers
it aligns a flex container’s lines within the flex container when there is extra space in the cross-axis.
&lt;img src=&quot;https://user-images.githubusercontent.com/41318449/55011570-67fc9b00-5029-11e9-9892-6e6d6267d37a.png&quot; alt=&quot;image&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Flex Container Baselines&lt;/h3&gt;
&lt;p&gt;the baselines of a flex container are determined as follows&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;first/last main-axis baseline set&lt;/li&gt;
&lt;li&gt;If any of the flex items on the flex container’s startmost/endmost flex line participate in baseline alignment, the flex container’s first/last main-axis baseline set is generated form te shared alignment baseline fo those flex item.&lt;/li&gt;
&lt;li&gt;Otherwise, if the flex container has at least one flex item, the flex container’s first/last main-axis baseline set is generated from the alignment baseline of the startmost/endmost flex item.&lt;/li&gt;
&lt;li&gt;Otherwise, the flex container has no first/last main-axis basline set, and one is synthesized if needed according to the rules of its alignment context.&lt;/li&gt;
&lt;li&gt;first/last cross-axis baseline set&lt;/li&gt;
&lt;li&gt;If the flex container has at least one flex item, the flex container’s first/last cross-axis baseline set is generated from the alignment baseline of the startmost/endmost flex item.&lt;/li&gt;
&lt;li&gt;Otherwise, the flex container has no first/last cross-axis baseline set, and one is synthesized if needed according to the rules of its alignment context.&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Days 25 - 26: Flex Item Width]]></title><description><![CDATA[Flexbox Item Width So far I haven’t shared with you the “annoying” moments as a front end engineer.
One of such moments is dealing with edge…]]></description><link>http://css.codinggirls.sg/day-25-26--flex-item-width/</link><guid isPermaLink="false">http://css.codinggirls.sg/day-25-26--flex-item-width/</guid><pubDate>Mon, 25 Mar 2019 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;Flexbox Item Width&lt;/h1&gt;
&lt;p&gt;So far I haven’t shared with you the “annoying” moments as a front end engineer.
One of such moments is dealing with edge cases.
And one of the most classic edge cases is very very very very very very very very long text.&lt;/p&gt;
&lt;h2&gt;Objectives&lt;/h2&gt;
&lt;p&gt;Consider this&lt;/p&gt;
&lt;p&gt;Render a one-line intro to someone, containing the person’s name, title, and one or two badges.&lt;/p&gt;
&lt;p&gt;But there are a few requirements from the PM:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;There is a fixed width to that intro, let’s say 500px&lt;/li&gt;
&lt;li&gt;The badges should always be there, and should be one the rightmost end of the container&lt;/li&gt;
&lt;li&gt;If there are not enough space, however, truncate the title first with ”…”&lt;/li&gt;
&lt;li&gt;But the title should at least display some characters, say 5&lt;/li&gt;
&lt;li&gt;Then, if there is still not enough space, truncate the person’s name with ”…”&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; If the title section has not reached its limit, should not truncate the name.
In other words, the name section has higher priority.
Should try to shrink the name first before the title runs out of space.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://codepen.io/wgao19/pen/BbxMJg&quot;&gt;&lt;div&gt;&lt;iframe 
        height=&apos;400&apos; 
        scrolling=&apos;no&apos; 
        src=&apos;//codepen.io/wgao19/embed/preview/BbxMJg/?height=400&amp;theme-id=dark&amp;default-tab=html,result&apos; 
        frameborder=&apos;no&apos; 
        allowtransparency=&apos;true&apos; 
        allowfullscreen=&apos;true&apos; 
        style=&apos;width: 100%;&apos;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Reading&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.w3.org/TR/css-flexbox-1/&quot;&gt;Flexible Box Module 1&lt;/a&gt;, sections 7 - 8&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Days 23 - 24: Flex Navbar]]></title><description><![CDATA[Flexible Navigation Bar Creating layouts resilient to different browsers and dimensions is constantly a sweet challenge for front engineers…]]></description><link>http://css.codinggirls.sg/day-23-24--flex-nav-bar/</link><guid isPermaLink="false">http://css.codinggirls.sg/day-23-24--flex-nav-bar/</guid><pubDate>Fri, 22 Mar 2019 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;Flexible Navigation Bar&lt;/h1&gt;
&lt;p&gt;Creating layouts resilient to different browsers and dimensions is constantly a sweet challenge for front engineers.
Common problems include&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;vertical menus of different content widths&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://d2mxuefqeaa7sj.cloudfront.net/s_46691719D9A10FD85475E1AE5C9BBC1C5717457E8F6BBDBAEABA998CE95A0357_1551847907593_image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;v.s.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://d2mxuefqeaa7sj.cloudfront.net/s_46691719D9A10FD85475E1AE5C9BBC1C5717457E8F6BBDBAEABA998CE95A0357_1551847870786_image.png&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;horizontal navbars with different content heights (like our navbar on the home page!)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://d2mxuefqeaa7sj.cloudfront.net/s_7FC7454BD521E52E89C9AB7899682ED5AF3E74159AC1909BB1DF8BD8579F27BA_1553186614688_image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;Flexbox allows us to finetune alignment and space distribution among our the flex box items.&lt;/p&gt;
&lt;h2&gt;Objectives&lt;/h2&gt;
&lt;p&gt;To begin with, if you are completely new to flex box, I invite you to check out this &lt;a href=&quot;https://flexboxfroggy.com/&quot;&gt;Flex Box Froggy&lt;/a&gt; challenge.
It should take some an hour or so.
You may skip this if you already know flexbox’s magics.&lt;/p&gt;
&lt;p&gt;Then, for today’s challenge, please
&lt;a href=&quot;https://dribbble.com/search?q=navbar&quot;&gt;implement a navbar of your choice&lt;/a&gt;, using flexbox.&lt;/p&gt;
&lt;p&gt;Here’s mine: (somewhat more of a sidebar I guess 🙈)&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://codepen.io/wgao19/pen/BbxGpK&quot;&gt;&lt;div&gt;&lt;iframe 
        height=&apos;400&apos; 
        scrolling=&apos;no&apos; 
        src=&apos;//codepen.io/wgao19/embed/preview/BbxGpK/?height=400&amp;theme-id=dark&amp;default-tab=html,result&apos; 
        frameborder=&apos;no&apos; 
        allowtransparency=&apos;true&apos; 
        allowfullscreen=&apos;true&apos; 
        style=&apos;width: 100%;&apos;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Reading&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.w3.org/TR/css-flexbox-1/&quot;&gt;Flexible Box Module 1&lt;/a&gt;, sections 1 - 6&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Study Notes: Reading CSS Flex Layout Module 1 - Chapter 1~6]]></title><description><![CDATA[Original post by tae: Reading CSS Flex Layout Module 1 - Chapter 1~6 TIL - Reading CSS Flex Layout Module 1 - Chapter 1~6 Overview In return…]]></description><link>http://css.codinggirls.sg/notes-css-flex-1-tae/</link><guid isPermaLink="false">http://css.codinggirls.sg/notes-css-flex-1-tae/</guid><pubDate>Thu, 21 Mar 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Original post by &lt;a href=&quot;https://github.com/Ta2Rim&quot;&gt;tae&lt;/a&gt;: &lt;a href=&quot;https://gist.github.com/Ta2Rim/706c3151ddc576f44d9e49d9272a050a&quot;&gt;Reading CSS Flex Layout Module 1 - Chapter 1~6&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;TIL - Reading CSS Flex Layout Module 1 - Chapter 1~6&lt;/h1&gt;
&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;In return Flex Layout gains simple and powerful tools for distributing space and aligning content in ways that web apps and complex web pages often need.
It allows authors sematically write HTML code, regarardless of visual presentation.&lt;/p&gt;
&lt;h2&gt;Flex Layout Box Model and Terminology&lt;/h2&gt;
&lt;p&gt;A flex container is the box generated by an element with a computed display of flex or inline-flex. In-flow children of a flex container are called flex items and are laid out using the flex layout model.&lt;/p&gt;
&lt;p&gt;flex layout is biased to the &lt;strong&gt;flex directions.&lt;/strong&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/41318449/54881506-1cfd4f00-4e94-11e9-8aee-88d52ed40d77.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;An illustration of the various directions and sizing terms as applied to a row flex container.
this image explains all about flex layout&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Flex Containers: the flex and inline-flex display values&lt;/h2&gt;
&lt;p&gt;Name:	display
New values:	flex | inline-flex&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;flex&lt;/code&gt; :  This value causes an element to generate a flex container box that is block-level when placed in flow layout.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;inline-flex&lt;/code&gt; : This value causes an element to generate a flex container box that is inline-level when placed in flow layout.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;some properties don’t apply in the context of flex layout.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;float&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;clear&lt;/code&gt; do not create floating or clearance of flex item, and do not take it out-of-flow.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;vertical-align&lt;/code&gt; has no effect on a flex item.&lt;/li&gt;
&lt;li&gt;the &lt;code class=&quot;language-text&quot;&gt;::first-line&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;::first-letter&lt;/code&gt; pseudo-elements do not apply to flex containers, and flex containers do not contribute a first formatted line or first letter to their ancestors.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Flex Items&lt;/h2&gt;
&lt;p&gt;Each in-flow child of a flex container becomes a flex item, and each contiguous sequence of child text runs is wrapped in an anonymous block container flex item. &lt;/p&gt;
&lt;p&gt;A code is worth a thousand words.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;div style=&quot;display:flex&quot;&gt;

    &amp;lt;!-- flex item: block child --&gt;
    &amp;lt;div id=&quot;item1&quot;&gt;block&amp;lt;/div&gt;

    &amp;lt;!-- flex item: floated element; floating is ignored --&gt;
    &amp;lt;div id=&quot;item2&quot; style=&quot;float: left;&quot;&gt;float&amp;lt;/div&gt;

    &amp;lt;!-- flex item: anonymous block box around inline content --&gt;
    anonymous item 3

    &amp;lt;!-- flex item: inline child --&gt;
    &amp;lt;span&gt;
        item 4
        &amp;lt;!-- flex items do not split around blocks --&gt;
        &amp;lt;q style=&quot;display: block&quot; id=not-an-item&gt;item 4&amp;lt;/q&gt;
        item 4
    &amp;lt;/span&gt;
&amp;lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Absolutely-poistioned Flex Children&lt;/h3&gt;
&lt;p&gt;As it is out-of-flow, an absolutely-positioned child of a flex container does not participate in flex layout.&lt;/p&gt;
&lt;h3&gt;Flex Item Margins and Paddings&lt;/h3&gt;
&lt;p&gt;Percentage margins and paddings on flex items, like those on block boxes, are resolved against the inline size of their containing block&lt;/p&gt;
&lt;h3&gt;Flex Item Z-Ordering&lt;/h3&gt;
&lt;p&gt;Flex items paint exactly the same as inline blocks, except that &lt;code class=&quot;language-text&quot;&gt;order&lt;/code&gt;-modified document order
and &lt;code class=&quot;language-text&quot;&gt;z-index&lt;/code&gt; values are behaving exactly as if position were relative.&lt;/p&gt;
&lt;h3&gt;Collapsed Items&lt;/h3&gt;
&lt;p&gt;Specifying visibility:collapse on a flex item causes it to become a &lt;em&gt;collapsed flex item&lt;/em&gt;, producing an effect similar to visibility:collapse on a table-row or table-column:
&lt;img src=&quot;https://user-images.githubusercontent.com/41318449/54881980-e5dd6c80-4e98-11e9-8a78-58f4ecdfd3eb.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;‘Architecture’ is the logest word in &lt;li&gt; list. width of element contains this word should be stable even if it hides. that’s why this behavior is important.&lt;/p&gt;
&lt;h3&gt;Automatic Minimum size of Flex Items&lt;/h3&gt;
&lt;p&gt;these 3 suggestions used in this calculation account for the relevant min/max/preferred size properties so that the content-based minimum size does not interfere with any author-provided constraints, and are defined below:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;specified size suggestion&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;If the item’s computed main size property is definite, then the specified size suggestion is that size. It is otherwise undefined.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;transferred size suggestion&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;If the item has an intrinsic aspect ratio and its computed cross size property is definite, then the transferred size suggestion is that size, converted through the aspect ratio. It is otherwise undefined.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;content size suggestion&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;The content size suggestion is the min-content size in the main axis, clamped, if it has an aspect ratio, by any definite min and max cross size properties converted through the aspect ratio, and then further clamped by the max main size property if that is definite.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Ordering and Orientation&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;WARNING : Authors must not use order or the `&lt;/em&gt;-reverse&lt;code class=&quot;language-text&quot;&gt;values of&lt;/code&gt;flex-flow&lt;code class=&quot;language-text&quot;&gt;/&lt;/code&gt;flex-direction` as a substitute for correct source ordering, as that can ruin the accessibility of the document. *&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;Flex Flow Direction: the flex-direction property&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Name:	flex-direction&lt;/li&gt;
&lt;li&gt;Value:	row | row-reverse | column | column-reverse
The flex-direction property specifies how flex items are placed in the flex container, by setting the direction of the flex container’s main axis. This determines the direction in which flex items are laid out.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Flex Line Wrapping: the flex-wrap property&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Name:	flex-wrap&lt;/li&gt;
&lt;li&gt;Value:	nowrap | wrap | wrap-reverse
The flex-wrap property controls whether the flex container is single-line or multi-line, and the direction of the cross-axis, which determines the direction new lines are stacked in.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Flex Direction and Wrap: the flex-flow shorthand&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Name:	flex-flow&lt;/li&gt;
&lt;li&gt;Value:	&amp;#x3C;‘flex-direction’&gt; || &amp;#x3C;‘flex-wrap’&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;**note that &lt;code class=&quot;language-text&quot;&gt;flex-flow&lt;/code&gt; directions are writing mode sensitive
&lt;img src=&quot;https://user-images.githubusercontent.com/41318449/54882188-d4955f80-4e9a-11e9-9a21-fca42f3e1d0f.png&quot; alt=&quot;image&quot;&gt;
**&lt;/p&gt;
&lt;h3&gt;Display Order: the order property&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Name:	order&lt;/li&gt;
&lt;li&gt;Value:	&lt;integer&gt;
Flex items are, by default, displayed and laid out in the same order as they appear in the source document. The order property can be used to change this ordering.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;.tabs {
  display: flex;
}
.tabs &gt; .current {
  order: -1; /* Lower than the default of 0 */
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;The order property does not affect ordering in non-visual media (such as speech). Likewise, order does not affect the default traversal order of sequential navigation modes (such as cycling through links&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;Flex Lines&lt;/h2&gt;
&lt;p&gt;Flex items in a flex container are laid out and aligned within flex lines, hypothetical containers used for grouping and alignment by the layout algorithm.
There’s two types of flex lines container&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;A single-line flex container (i.e. one with flex-wrap: nowrap)&lt;/em&gt; : it lays out all of its children in a single line, even if that would cause its contents to overflow.
&lt;img src=&quot;https://user-images.githubusercontent.com/41318449/54882261-859bfa00-4e9b-11e9-8cc3-79ade15b6229.png&quot; alt=&quot;image&quot;&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;A multi-line flex container (i.e. one with flex-wrap: wrap or flex-wrap: wrap-reverse)&lt;/em&gt; : it breaks its flex items across multiple lines, similar to how text is broken onto a new line when it gets too wide to fit on the existing line. When additional lines are created, they are stacked in the flex container along the cross axis according to the flex-wrap property. Every line contains at least one flex item, unless the flex container itself is completely empty.&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Days 21 ~ 22: Layout with Grid]]></title><description><![CDATA[Nihongo Nikki Let’s leave the fancy stuff for a while and come back to the CSS Grid’s original intention - to create layout. Designers may…]]></description><link>http://css.codinggirls.sg/day-21-22--layout-with-grid/</link><guid isPermaLink="false">http://css.codinggirls.sg/day-21-22--layout-with-grid/</guid><pubDate>Wed, 20 Mar 2019 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;Nihongo Nikki&lt;/h1&gt;
&lt;p&gt;Let’s leave the fancy stuff for a while and come back to the CSS Grid’s original intention - to create layout.&lt;/p&gt;
&lt;p&gt;Designers may know much more about grids then front end developers.
Now that we’ve read much of the CSS’ specifications on grid, how does it fulfill the needs of grid designs?&lt;/p&gt;
&lt;h2&gt;Objectives&lt;/h2&gt;
&lt;p&gt;Today let’s create a page layout with grid.&lt;/p&gt;
&lt;p&gt;I’ve created mine &lt;a href=&quot;https://codepen.io/wgao19/pen/jXgbPy&quot;&gt;here&lt;/a&gt;, a minimalist practice book for my Japanese studies. And yes, I’ve made it to &lt;a href=&quot;https://japanese.wgao19.cc/&quot;&gt;a website&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://codepen.io/wgao19/pen/jXgbPy&quot;&gt;&lt;div&gt;&lt;iframe 
        height=&apos;400&apos; 
        scrolling=&apos;no&apos; 
        src=&apos;//codepen.io/wgao19/embed/preview/jXgbPy/?height=400&amp;theme-id=dark&amp;default-tab=html,result&apos; 
        frameborder=&apos;no&apos; 
        allowtransparency=&apos;true&apos; 
        allowfullscreen=&apos;true&apos; 
        style=&apos;width: 100%;&apos;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Please share with us yours :)&lt;/p&gt;
&lt;h2&gt;Reading&lt;/h2&gt;
&lt;p&gt;Finally! Let’s finish &lt;a href=&quot;https://www.w3.org/TR/css-grid-1/&quot;&gt;CSS Grid Layout Module 1&lt;/a&gt;, remaining sections.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Study Notes: CSS Grid Layout Module 1 - Chapter 7~8]]></title><description><![CDATA[Original post by tae: Day 19~20 Reading CSS Grid Layout Module 1 - Chapter 7~8 #TIL - Reading CSS Grid Layout Module 1 - Chapter 7~8 Grid…]]></description><link>http://css.codinggirls.sg/notes-css-grids-3-tae/</link><guid isPermaLink="false">http://css.codinggirls.sg/notes-css-grids-3-tae/</guid><pubDate>Tue, 19 Mar 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Original post by &lt;a href=&quot;https://github.com/Ta2Rim&quot;&gt;tae&lt;/a&gt;: &lt;a href=&quot;https://gist.github.com/Ta2Rim/47305c247c11c1e7e8d1a1e01f559ba9&quot;&gt;Day 19~20 Reading CSS Grid Layout Module 1 - Chapter 7~8&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;#TIL - Reading CSS Grid Layout Module 1 - Chapter 7~8&lt;/h1&gt;
&lt;p&gt;Grid consists of two area, &lt;strong&gt;Explicit Grid&lt;/strong&gt; and &lt;strong&gt;Implicit Grid&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The three properties &lt;code class=&quot;language-text&quot;&gt;grid-template-rows&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;grid-template-columns&lt;/code&gt;, and &lt;code class=&quot;language-text&quot;&gt;grid-template-areas&lt;/code&gt; together define the explicit grid of a grid container.&lt;/p&gt;
&lt;p&gt;The final grid may end up larger due to grid items placed outside the explicit grid; in this case implicit tracks will be created, these implicit tracks will be sized by the &lt;code class=&quot;language-text&quot;&gt;grid-auto-rows&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;grid-auto-columns&lt;/code&gt; properties.&lt;/p&gt;
&lt;p&gt;There’re a lot of ways to use grid style.&lt;/p&gt;
&lt;h2&gt;Explict Grid&lt;/h2&gt;
&lt;h3&gt;Explicit Track Sizing: the &lt;code class=&quot;language-text&quot;&gt;grid-template-rows&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;grid-template-columns&lt;/code&gt; properties&lt;/h3&gt;
&lt;p&gt;These properties specify, as a space-separated track list, the line names and track sizing functions of the grid.
these properties determine Explicit grid area.&lt;/p&gt;
&lt;p&gt;Authors also can name grid lines with the &lt;code class=&quot;language-text&quot;&gt;[&amp;lt;custom-ident&gt;*]&lt;/code&gt; syntax&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;  #grid { 
    display : grid;
    grid-template-columns : [first nav-start] 150px [main-start] 1fr [last]; /*the ident that has space means that line has multiple names.*/
    grid-template-rows: [first header-start] 50px [main-start] 1fr [footer-start] 50px [last];
  }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/41318449/54618029-ad5b1e80-4aa5-11e9-8319-e545a2612df5.png&quot; alt=&quot;grid-named-lines&quot;&gt;&lt;/p&gt;
&lt;p&gt;with &lt;code class=&quot;language-text&quot;&gt;repeat()&lt;/code&gt; notation, authors don’t need to write down repeted fragment.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;  grid-template-columns: 10px [col-start] 250px [col-end]
                         10px [col-start] 250px [col-end]
                         10px [col-start] 250px [col-end]
                         10px [col-start] 250px [col-end] 10px;
  /* same as above, except easier to write */
  grid-template-columns: repeat(4, 10px [col-start] 250px [col-end]) 10px;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Authors may not be able to know how much area will remain, then use &lt;code class=&quot;language-text&quot;&gt;auto-fill&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;auto-fit&lt;/code&gt; repetitions&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;.wrapper {
  display: grid;
  grid-template-columns: repeat(auto-fill, 200px);
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this example, the following code will create 200px grids that can fill columns&lt;/p&gt;
&lt;p&gt;The auto-fit keyword behaves the same as auto-fill, except that after grid item placement any empty repeated tracks are collapsed. &lt;/p&gt;
&lt;p&gt;these two properties are resolved value special case properties. [CSSOM]
It means, authors can access to these values with js.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;script&gt;
  var gridElement = document.getElementById(&quot;grid&quot;);
  getComputedStyle(gridElement).gridTemplateColumns;
  // [a] 50px [b] 320px [b c d] repeat(2, [e] 40px) repeat(4, 0px) 50px
&amp;lt;/script&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Named Areas: the &lt;code class=&quot;language-text&quot;&gt;grid-template-areas&lt;/code&gt; property&lt;/h3&gt;
&lt;p&gt;This property specifies named grid areas, which are not associated with any particular grid item, but can be referenced from the grid-placement properties.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;#grid {
  display: grid;
  grid-template-areas: &quot;head head&quot;
                       &quot;nav  main&quot;
                       &quot;foot ....&quot;
}
#grid &gt; header { grid-area: head; }
#grid &gt; nav    { grid-area: nav; }
#grid &gt; main   { grid-area: main; }
#grid &gt; footer { grid-area: foot; }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;this property creates implicit named lines from the named grid areas in the template. &lt;/p&gt;
&lt;h2&gt;the &lt;code class=&quot;language-text&quot;&gt;grid-template&lt;/code&gt; property : Explicit Grid Shorthand&lt;/h2&gt;
&lt;p&gt;The grid-template property is a shorthand for setting grid-template-columns, grid-template-rows, and grid-template-areas in a single declaration. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;grid-template: auto 1fr / auto 1fr auto;
/*is equivalent to*/

grid-template-rows: auto 1fr;
grid-template-columns: auto 1fr auto;
grid-template-areas: none;

grid-template: [header-top] &quot;a   a   a&quot;     [header-bottom]
                 [main-top] &quot;b   b   b&quot; 1fr [main-bottom]
                          / auto 1fr auto;
/*is equivalent to*/
grid-template-areas: &quot;a a a&quot;
                     &quot;b b b&quot;;
grid-template-rows: [header-top] auto [header-bottom main-top] 1fr [main-bottom];
grid-template-columns: auto 1fr auto;
                          &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Implicit Grid&lt;/h2&gt;
&lt;p&gt;Simply, it’s area that outside of explicit grid bound. Implict Grid is set by 3 properties : &lt;code class=&quot;language-text&quot;&gt;grid-auto-rows&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;grid-auto-columns&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;grid-auto-flow&lt;/code&gt;. also grid shorthand affects, too.&lt;/p&gt;
&lt;h3&gt;the &lt;code class=&quot;language-text&quot;&gt;grid-auto-rows&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;grid-auto-columns&lt;/code&gt; properties :Implicit Track Sizing&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;style&gt;
  #grid {
    display: grid;
    grid-template-columns: 20px;
    grid-auto-columns: 40px;
    grid-template-rows: 20px;
    grid-auto-rows: 40px;
  }
  #A { grid-column: 1; grid-row: 1; }
  #B { grid-column: 2; grid-row: 1; }
  #C { grid-column: 1; grid-row: 2; }
  #D { grid-column: 2; grid-row: 2; }
&amp;lt;/style&gt;

&amp;lt;div id=&quot;grid&quot;&gt;
  &amp;lt;div id=&quot;A&quot;&gt;A&amp;lt;/div&gt;
  &amp;lt;div id=&quot;B&quot;&gt;B&amp;lt;/div&gt;
  &amp;lt;div id=&quot;C&quot;&gt;C&amp;lt;/div&gt;
  &amp;lt;div id=&quot;D&quot;&gt;D&amp;lt;/div&gt;
&amp;lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/41318449/54620703-e85f5100-4aa9-11e9-968c-31d56641c37a.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;h3&gt;the &lt;code class=&quot;language-text&quot;&gt;grid-auto-flow&lt;/code&gt; property | Automatic Placement&lt;/h3&gt;
&lt;p&gt;Value : [ row | column ] || dense&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;  grid-auto-flow: row dense;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;dense : If specified, the auto-placement algorithm uses a “dense” packing algorithm, which attempts to fill in holes earlier in the grid if smaller items come up later.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Placing Grid Items&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;grid position&lt;/strong&gt; : The grid item’s location in the grid in each axis. A grid position can be either definite (explicitly specified) or automatic (determined by auto-placement).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;grid span&lt;/strong&gt; : How many grid tracks the grid item occupies in each axis. A grid item’s grid span is always definite, defaulting to 1 in each axis if it can’t be otherwise determined for that axis.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/41318449/54621796-b222d100-4aab-11e9-8ba7-a3353738ec99.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;The grid-placement property longhands are organized into three shorthands&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;  /* 1. Named-area */
  article.one {
    grid-area: main;
    /* Places item into the named area &quot;main&quot;. */
  }

  /* 2. Numeric Indexes and Spans */
  article.two {
    grid-row: 2 / span 5;
    /* Starts in the 2nd row,
     spans 5 rows down (ending in the 7th row). */
  }
  
  /* 3. Named Lines and Spans */
  article.three {
    grid-row: text 5 / span text 2;
    /* Same as grid-row: text 5 / text 7; - start at the 5th line named &quot;text&quot;,
       then span across two more &quot;text&quot; lines, to the 7th. */
  }
  
  /* 4.Auto Placement */
  article.four {
    grid-area: auto; /* Initial value */
  }
  article.five {
    grid-area: span 2 / span 3;
    /* Auto-placed item, covering two rows and three columns. */
  }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;grid-placement properties are not a substitute for correct source ordering.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;the &lt;code class=&quot;language-text&quot;&gt;grid-row-start&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;grid-column-start&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;grid-row-end&lt;/code&gt;, and &lt;code class=&quot;language-text&quot;&gt;grid-column-end&lt;/code&gt; properties : Line-based Placement&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;  Value:	&amp;lt;grid-line&gt;
  
  &amp;lt;grid-line&gt; =
  auto |
  &amp;lt;custom-ident&gt; |
  [ &amp;lt;integer&gt; &amp;amp;&amp;amp; &amp;lt;custom-ident&gt;? ] |
  [ span &amp;amp;&amp;amp; [ &amp;lt;integer&gt; || &amp;lt;custom-ident&gt; ] ]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Given a single-row, 8-column grid and the following 9 named lines:
1  2  3  4  5  6  7  8  9
+--+--+--+--+--+--+--+--+
|  |  |  |  |  |  |  |  |
A  B  C  A  B  C  A  B  C
|  |  |  |  |  |  |  |  |
+--+--+--+--+--+--+--+--+
The following declarations place the grid item between the lines indicated by index:

grid-column-start: 4; grid-column-end: auto;
/* Line 4 to line 5 */

grid-column-start: auto; grid-column-end: 6;
/* Line 5 to line 6 */

grid-column-start: C; grid-column-end: C -1;
/* Line 3 to line 9 */

grid-column-start: C; grid-column-end: span C;
/* Line 3 to line 6 */

grid-column-start: span C; grid-column-end: C -1;
/* Line 6 to line 9 */

grid-column-start: span C; grid-column-end: span C;
/* Error: The end span is ignored, and an auto-placed
   item can’t span to a named line.
   Equivalent to grid-column: span 1;. */

grid-column-start: 5; grid-column-end: C -1;
/* Line 5 to line 9 */

grid-column-start: 5; grid-column-end: span C;
/* Line 5 to line 6 */

grid-column-start: 8; grid-column-end: 8;
/* Error: line 8 to line 9 */

grid-column-start: B 2; grid-column-end: span 1;
/* Line 5 to line 6 */&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;strong&gt;* Grid Item Placement Algorithm *&lt;/strong&gt;&lt;/h3&gt;
&lt;ol start=&quot;0&quot;&gt;
&lt;li&gt;Generate anonymous grid items&lt;/li&gt;
&lt;li&gt;Position anything that’s not auto-positioned.&lt;/li&gt;
&lt;li&gt;Process the items locked to a given row. - through sparse/dense packing&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Determine the columns in the implicit grid.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;#grid {
display: grid;
grid-template-columns: repeat(5, 100px);
grid-auto-flow: row;
}
#grid-item {
grid-column: 4 / span 3;
}
The number of columns needed is 6. The explicit grid provides its 5 columns (from grid-template-columns) with lines number 1 through 6, but #grid-item’s column position means it ends on line 7, which requires an additional column added to the end of the implicit grid.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;Position the remaining grid items.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;What’s more?&lt;/h2&gt;
&lt;h3&gt;the &lt;code class=&quot;language-text&quot;&gt;fr&lt;/code&gt; unit - flexible lenghts&lt;/h3&gt;
&lt;p&gt;A flexible length or &lt;code class=&quot;language-text&quot;&gt;&amp;lt;flex&gt;&lt;/code&gt; is a dimension with the &lt;code class=&quot;language-text&quot;&gt;fr&lt;/code&gt; unit, which represents a fraction of the leftover space in the grid container.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Days 19 ~ 20: Grid Patterns]]></title><description><![CDATA[Wafu For eyes seeking beautiful matters, and for minds passionate about CSS, seeing kawaii patterns like this in real life just makes you…]]></description><link>http://css.codinggirls.sg/day-19-20--grid-pattern/</link><guid isPermaLink="false">http://css.codinggirls.sg/day-19-20--grid-pattern/</guid><pubDate>Mon, 18 Mar 2019 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;Wafu&lt;/h1&gt;
&lt;p&gt;For eyes seeking beautiful matters, and for minds passionate about CSS, seeing kawaii patterns like &lt;a href=&quot;https://www.instagram.com/p/BomMEO6lplM/&quot;&gt;this&lt;/a&gt; in real life just makes you want to write CSS for it 😂.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://instagram.fsin2-1.fna.fbcdn.net/vp/adda10cd6341b1cb660a3a78daff7316/5CDE1E71/t51.2885-15/e35/42002454_196971331098538_7447808022802619645_n.jpg?_nc_ht=instagram.fsin2-1.fna.fbcdn.net&quot;&gt;&lt;/p&gt;
&lt;p&gt;Not bad, eh?
Turns out CSS grid helped again.
It really is a bit manual, I guess that’s real life.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pbs.twimg.com/media/Dwpd-7AU0AINTN7.jpg&quot;&gt;&lt;/p&gt;
&lt;h2&gt;Objectives&lt;/h2&gt;
&lt;p&gt;Implement a beautiful pattern that you find in real life.
If you don’t want the hassle of looking — try the wafu above （╹◡╹）&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://codepen.io/wgao19/pen/WLYvqV&quot;&gt;Just a hint&lt;/a&gt;, as always.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://codepen.io/wgao19/pen/WLYvqV&quot;&gt;&lt;div&gt;&lt;iframe 
        height=&apos;400&apos; 
        scrolling=&apos;no&apos; 
        src=&apos;//codepen.io/wgao19/embed/preview/WLYvqV/?height=400&amp;theme-id=dark&amp;default-tab=html,result&apos; 
        frameborder=&apos;no&apos; 
        allowtransparency=&apos;true&apos; 
        allowfullscreen=&apos;true&apos; 
        style=&apos;width: 100%;&apos;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Spoiler: the math part is real fun.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Reading&lt;/h2&gt;
&lt;p&gt;I know, I know, it just doesn’t go away. Heard this passage?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;They that sow in tears shall reap in joy.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We’ll get there :) :)&lt;/p&gt;
&lt;p&gt;Still reading &lt;a href=&quot;https://www.w3.org/TR/css-grid-1/&quot;&gt;CSS Grid Layout Module 1&lt;/a&gt;, sections 7, 8.&lt;/p&gt;
&lt;h2&gt;Further&lt;/h2&gt;
&lt;p&gt;Check out &lt;a href=&quot;https://css-doodle.com/&quot;&gt;CSS Doodle&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://2019.jsconf.asia&quot;&gt;JSConf Asia 2019’s Website&lt;/a&gt; has a CSS-Doodle animation on its home page :) Maybe there’d be yours.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Study Notes: CSS Grid Layout Module 1 - Chapter 4~6]]></title><description><![CDATA[Original post by tae: Day 17~18 Reading CSS Grid Layout Module 1 - Chapter 4~6 #TIL : CSS Grid Layout Module 1 Reordering and Accessibility…]]></description><link>http://css.codinggirls.sg/notes-css-grids-2-tae/</link><guid isPermaLink="false">http://css.codinggirls.sg/notes-css-grids-2-tae/</guid><pubDate>Sat, 16 Mar 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Original post by &lt;a href=&quot;https://github.com/Ta2Rim&quot;&gt;tae&lt;/a&gt;: &lt;a href=&quot;https://gist.github.com/Ta2Rim/c1f7f632f2911d6abe00337349944c1c&quot;&gt;Day 17~18 Reading CSS Grid Layout Module 1 - Chapter 4~6&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;#TIL : CSS Grid Layout Module 1&lt;/h1&gt;
&lt;h2&gt;Reordering and Accessibility&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Authors must use ‘order’ and the grid-placement properties only for visual, no logical, reordering of content. Style sheets that use these features to perform logical reordering are non-conforming.&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;Grid Containers&lt;/h2&gt;
&lt;h3&gt;Establishing Grid Containers: the grid and inline-grid display values&lt;/h3&gt;
&lt;p&gt;name : ‘display’
new values : grid | inline-grid&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;grid&lt;/code&gt; - this value causes an element to generate a block-level grid container box.
&lt;code class=&quot;language-text&quot;&gt;inline-grid&lt;/code&gt; - this value causes an element to generate an inline-level grid container box.&lt;/p&gt;
&lt;p&gt;A grid container establishes a new grid formatting context for its contents&lt;/p&gt;
&lt;h4&gt;diffrence grid between block layout&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;floats / clear do not intrude into the grid container&lt;/li&gt;
&lt;li&gt;grid container’s margins do not collapse with the margins of its contents.&lt;/li&gt;
&lt;li&gt;vertical-align has no effect on a grid item.&lt;/li&gt;
&lt;li&gt;the ::first-line and ::first-letter pseudo-elements do not apply to grid containers.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Sizing Grid Containers&lt;/h3&gt;
&lt;p&gt;A grid container is sized following the rule in which contenxt it is&lt;/p&gt;
&lt;p&gt;The max(min)-content size of a grid container is the sum of the grid container’s track sizes (including gutters) in the appropriate axis, when the grid is sized under a max(min)-content constraint&lt;/p&gt;
&lt;h3&gt;Clamping Overly Large Grids&lt;/h3&gt;
&lt;p&gt;Due to memory limitation, UAs may clamp the possible size according to some rules.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If the grid area would span outside the limited grid, its span is clamped to the last line of the limited grid.&lt;/li&gt;
&lt;li&gt;If the grid area would be placed completely outside the limited grid, its span must be &lt;em&gt;truncated&lt;/em&gt; to 1 and the area repositioned into the last grid track on that side of the grid.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;.grid-item {
  grid-row : 500 / 1500;
  grid-column : 2000 / 3000;
}

If case UA only only supported grids with at most 1000 tracks in each dimesion , UA may : 50 translate it like this.

.grid-item { 
  grid-row : 500 / 1001;
  grid-column : 1000 / 1001;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Grid items&lt;/h2&gt;
&lt;p&gt;the grid items of a grid container are boxes representing its in-flow contents.&lt;/p&gt;
&lt;p&gt;grid item - Each in-flow child of a grid container.
each contiguous sequence of child text runs is wrapped in an anonymous block container grid item. when it contains only white space, it’s instead not rendered.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;div style=&quot;display: grid&quot;&gt;

    &amp;lt;!-- grid item: block child --&gt;
    &amp;lt;div id=&quot;item1&quot;&gt;block&amp;lt;/div&gt;

    &amp;lt;!-- grid item: floated element; floating is ignored --&gt;
    &amp;lt;div id=&quot;item2&quot; style=&quot;float: left;&quot;&gt;float&amp;lt;/div&gt;

    &amp;lt;!-- grid item: anonymous block box around inline content --&gt;
    anonymous item 3

    &amp;lt;!-- grid item: inline child --&gt;
    &amp;lt;span&gt;
        item 4
        &amp;lt;!-- grid items do not split around blocks --&gt;
        &amp;lt;q style=&quot;display: block&quot; id=not-an-item&gt;item 4&amp;lt;/q&gt;
        item 4
    &amp;lt;/span&gt;
&amp;lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When you remove text ‘anonymous item 3’, You can find out that inter-element white space disappears.&lt;/p&gt;
&lt;h3&gt;Grid Item Display&lt;/h3&gt;
&lt;p&gt;The display value of a grid item is blockified: if the specified display of an in-flow child of an element generating a grid container is an inline-level value, it computes to its block-level equivalent.&lt;/p&gt;
&lt;h3&gt;Grid Item Sizing&lt;/h3&gt;
&lt;p&gt;Grid item calculations for auto widths and heights vary by their self-alignment values:
| alignment |	Non-replaced Element Size	| Replaced Element Size	 |
|:--------|:--------|:--------|
| &lt;code class=&quot;language-text&quot;&gt;normal&lt;/code&gt; | Fill grid area |  Use intrinsic size |
| &lt;code class=&quot;language-text&quot;&gt;stretch&lt;/code&gt; | Fill grid area | Fill grid area |
| &lt;code class=&quot;language-text&quot;&gt;start&lt;/code&gt;,&lt;code class=&quot;language-text&quot;&gt;center&lt;/code&gt;,etc | ‘fit-content’ sizing (like floats) | Use intrinsic size |&lt;/p&gt;
&lt;h3&gt;the &lt;code class=&quot;language-text&quot;&gt;order&lt;/code&gt; property : Reordered Grid Items&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;As with reordering flex items, the order property must only be used when the visual order needs to be out-of-sync with the speech and navigation order; otherwise the underlying document source should be reordered instead.&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;&lt;em&gt;Grid Item Margins and Paddings&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;Percentage margins and paddings on grid items can be resolved against either:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;their own axis (left/right percentages resolve against width, top/bottom resolve against height)&lt;/li&gt;
&lt;li&gt;the inline axis (left/right/top/bottom percentages all resolve against width)
A User Agent choose one of these two behaviors, so authors are aware of each UAs’ different behavior. should avoid using percentages in paddings or margins on grid items entirely&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;the &lt;code class=&quot;language-text&quot;&gt;z-index&lt;/code&gt; property : Z-axis Ordering&lt;/h3&gt;
&lt;p&gt;The painting order of grid items is exactly the same as inline blocks&lt;/p&gt;
&lt;p&gt;except that order-modified document order is used in place of raw document order, and z-index values other than auto create a stacking context even if position is static (behaving exactly as if position were relative).&lt;/p&gt;
&lt;p&gt;Thus the z-index property can easily be used to control the z-axis order of grid items.&lt;/p&gt;
&lt;h3&gt;Automatic Minimum Size of Grid Items&lt;/h3&gt;
&lt;p&gt;The automatic minimum size for a grid item in a given dimension is its specified size if it exists, otherwise its transferred size if that exists, else its content size.&lt;/p&gt;
&lt;h2&gt;What’s more?&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Holy_grail_(web_design)&quot;&gt;Holy Grail Layout&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Days 17 ~ 18: Cards]]></title><description><![CDATA[Cards Grids remind me of the old days when CSS was not as powerful as right now, some relatively easy concept took tricks to implement.
Like…]]></description><link>http://css.codinggirls.sg/day-17-18--autofilling-grid/</link><guid isPermaLink="false">http://css.codinggirls.sg/day-17-18--autofilling-grid/</guid><pubDate>Fri, 15 Mar 2019 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;Cards&lt;/h1&gt;
&lt;p&gt;Grids remind me of the old days when CSS was not as powerful as right now, some relatively easy concept took tricks to implement.
Like when we used to use a &lt;code class=&quot;language-text&quot;&gt;1px&lt;/code&gt; image to “stand the place” for a div such that we could set &lt;code class=&quot;language-text&quot;&gt;width&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;height&lt;/code&gt; for divs.&lt;/p&gt;
&lt;p&gt;Now that we have grid, I’m not sure if I wish to think about how I would implement a stream gallery without it.&lt;/p&gt;
&lt;h2&gt;Objectives&lt;/h2&gt;
&lt;p&gt;Check out &lt;a href=&quot;https://dribbble.com/shots/4704119-Article-Cards&quot;&gt;this design&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.dribbble.com/users/606683/screenshots/4704119/article-cards.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;Original design: &lt;a href=&quot;https://dribbble.com/shots/4704119-Article-Cards&quot;&gt;Article Cards&lt;/a&gt; by &lt;a href=&quot;https://dribbble.com/danielkorpai&quot;&gt;Daniel Korpai&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Let’s create an image gallery like that :)&lt;/p&gt;
&lt;h2&gt;Reading&lt;/h2&gt;
&lt;p&gt;Let’s continue reading &lt;a href=&quot;https://www.w3.org/TR/css-grid-1/&quot;&gt;CSS Grid Layout Module 1&lt;/a&gt;, sections 4 - 6.&lt;/p&gt;
&lt;!-- TODO: add &quot;further&quot; section, referencing the color palette, etc--&gt;</content:encoded></item><item><title><![CDATA[Study Notes: CSS Grid Layout Module 1 - Chapter 1~3]]></title><description><![CDATA[Original post by tae: Day 15~16 Reading CSS Grid Layout Module 1 - Chapter 1~3 #TIL : CSS Grid Layout Module 1 I think type copied code is…]]></description><link>http://css.codinggirls.sg/notes-css-grids-1-tae/</link><guid isPermaLink="false">http://css.codinggirls.sg/notes-css-grids-1-tae/</guid><pubDate>Thu, 14 Mar 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Original post by &lt;a href=&quot;https://github.com/Ta2Rim&quot;&gt;tae&lt;/a&gt;: &lt;a href=&quot;https://gist.github.com/Ta2Rim/fe4035b41bb7b1cdf81bd64c25593654&quot;&gt;Day 15~16 Reading CSS Grid Layout Module 1 - Chapter 1~3&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;#TIL : CSS Grid Layout Module 1&lt;/h1&gt;
&lt;p&gt;I think type copied code is the best way to study some codes. so today I concentrate on coping examples.&lt;/p&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Grid Layout is a new layout model for CSS that has powerful abilites to control the sizing and positioning of boxes and their contents.
&lt;strong&gt;Grid Layout allows dramatic transformations in visual layout structure without requiring corresponding markup changes.&lt;/strong&gt; (GGREATT)&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;Grid&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;Flex&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;be oriented&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;2-dimensional&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;single-axis&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;the way to approach&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;top-down&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;bottom-up&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;remarks&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;allows explicit overlapping of items, and has more powerful spanning capabilites&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;content-size-based line-wrapping system to control its secondary axis.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;It provides a mechanism for authors to divide available space for layout into columns and rows using a set of predictable sizing behaviors.
the following lists are some examples.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Adapting Layouts to Available Space&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/41318449/54364187-b320c080-46af-11e9-9b71-f4d091f7e195.png&quot; alt=&quot;game-smaller&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.w3.org/TR/css-grid-1/images/game-larger.png&quot; alt=&quot;game-larger&quot;&gt; - when user expand the space&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Source-order independence&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/41318449/54364520-625d9780-46b0-11e9-8fa6-9043b5d8817c.png&quot; alt=&quot;game-portrait&quot;&gt; for portrait orientation.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/41318449/54364521-62f62e00-46b0-11e9-9371-37acedf3b008.png&quot; alt=&quot;game-landscape&quot;&gt; for landscape orientation.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Grid item placement and reordering must not be used as a substitute for correct source ordering, as that can ruin the accessbillity of the document&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;Overview&lt;/h2&gt;
&lt;h3&gt;Grid Layout Features&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;fixed, flexible, and content-based &lt;em&gt;track sizing functions&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;explicit item placement&lt;/em&gt; via positive and negative numerical grid coordinates, named grid lines, and named grid areas.&lt;/li&gt;
&lt;li&gt;space sensitive track repetition and automatic addition for rows or columns to accommodate additional content&lt;/li&gt;
&lt;li&gt;control over alignment and spacing with &lt;em&gt;margins&lt;/em&gt;, &lt;em&gt;gutters&lt;/em&gt;, and the &lt;em&gt;alignment properties&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;the ability to overlap content and &lt;em&gt;control layering with ‘z-index’&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;example 1.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;  .grid {
    grid : &apos;H H &apos;
           &apos;A B &apos;
           &apos;F F &apos; 30px
           auto 1fr;
  }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;auto&lt;/code&gt; - content based
&lt;code class=&quot;language-text&quot;&gt;1fr&lt;/code&gt; - unit of remaning space
&lt;code class=&quot;language-text&quot;&gt;30px&lt;/code&gt; - fixed size&lt;/p&gt;
&lt;p&gt;example 2.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;  .grid {
    grid : repeat(auto-fill, 5em) / auto-flow 1fr;
    height : 100vh;
  }
  @media (orientation : landscape) {
    .grid {
      grid : auto-flow 1fr / repeat(auto-fill, 5em);
    }
  }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;a grid with as many rows of at least ‘5em’ as will fit in the height of the grid container(&lt;code class=&quot;language-text&quot;&gt;100vh&lt;/code&gt;)
and columns are added as content is added, the resulting column widths are equalized(&lt;code class=&quot;language-text&quot;&gt;1fr&lt;/code&gt;)
when orientation changed to landscape, it alternates.&lt;/p&gt;
&lt;p&gt;example 3.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;  .grid {
    grid : auto 1fr auto / reapeat(5, 1fr);
    min-height:100vh;
  }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;a grid with 5 evenly-sized columns and three rows, with the middle row taking up all remaining space.(and at least enough to fit its contents)&lt;/p&gt;
&lt;h3&gt;Placing Items&lt;/h3&gt;
&lt;p&gt;the way place grid items
example 1 - with &lt;code class=&quot;language-text&quot;&gt;grid-area&lt;/code&gt; shorthand&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;  grid-area : a;
  grid-row : a; grid-column : a; /* it&apos;s equivalent to the above sentence (longhand)*/
  
  grid-area: 2/4;
  grid-row : 2; grid-column : 4;
  
  grid-area : 1 / 3 / -1;
  grid-row : 1/-1; grid-column : 3;
  grid-row-start : 1; grid-column-start : 3; grid-row-end : -1; gird-column-end:auto;
  
  grid-area : header-start / sidebar-start / footer-end / sidebar-start;
  grid-row : header-start/footer-end; grid-column : sidebar-start/footer-end
  &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Sizing the Grid&lt;/h3&gt;
&lt;p&gt;Once the grid items have been placed, the sizes of the grid tracks are calculated, accounting for the sizes of their contents and or avaliable space as specified in the grid definition.&lt;/p&gt;
&lt;p&gt;example 1.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;.grid {
  grid : auto-flow 1fr / repeat(auto-fill, 5em);
  min-height : 100vh;
  justify-content : space-between;
  align-content : safe center;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;this source justifies all columns by distributing any extra space among them, and centers the grid in the grid container when it is smaller than 100vh.&lt;/p&gt;
&lt;h2&gt;Grid Layout Concepts and Terminology&lt;/h2&gt;
&lt;p&gt;composition of grid layout&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;grid container&lt;/em&gt; - be laid out by positionin gand aligning it into a &lt;em&gt;grid&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;grid lines&lt;/em&gt; - devides the &lt;em&gt;grid container&lt;/em&gt;’s space in to &lt;em&gt;grid area&lt;/em&gt;, two type exist. block axis(column axis) and inline axis(row axis)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;grid areas&lt;/em&gt; - logical space used to lay out one or more grid items.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;grid items&lt;/em&gt; - representing the grid container’s content&lt;/li&gt;
&lt;li&gt;&lt;em&gt;grid track&lt;/em&gt; - the space between two adjacent grid lines. Each grid track is assigned a sizing function. which controls how wide or tall the column or row may grow, and thus how far part its boudning grid lines are.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;grid cell&lt;/em&gt; - the intersection of a grid row and a grid column. it’s the smallest unit of the grid that can be referenced when positioning grid items.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Grid Lines&lt;/h3&gt;
&lt;p&gt;following two examples both create three column grid lines and four row grid lines.
example 1. How an author would position a grid item using grid line numbers.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;  #grid {
    display:grid;
    grid-template-columns : 150px 1fr;
    grid template-rows : 50px 1fr 50px;
  }
  
  #item1 { grid-column : 2; grid-row-start:1; grid-row-end :4; }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;example 2. uses explicitly named grid lines&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;  #grid {
    display:grid;
    grid-template-columns : 150px [item1-start] 1fr [item1-end];
    grid-tempalte-rows : [item1-start] 50px 1fr 50px [item1-end];
  }
  
  #item1{
    grid-column : item1-start/item1-end;
    grid-row : item1-start / item1-end;
  }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Grid Areas&lt;/h3&gt;
&lt;p&gt;A grid area can be named explicitly using the &lt;code class=&quot;language-text&quot;&gt;grid-template-area&lt;/code&gt; property of the grid container, or referenced implicitly by its bounding grid lines.&lt;/p&gt;
&lt;p&gt;A grid item is assigned to a grid area using the &lt;code class=&quot;language-text&quot;&gt;grid-placement&lt;/code&gt; properties.&lt;/p&gt;
&lt;p&gt;example 1.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;  #grid {
    display : grid;
    grid-template-areas : &apos;. a&apos;
                          &apos;b a&apos;
                          &apos;. a&apos;;
    grid-template-columns: 150px 1fr;
    grid-template-rows : 50px 1fr 50px;                      
  }
  
  #item1 { grid-area : a }
  #item2 { grid-area : b }
  #item3 { grid-area : b }
  
  #item2 { align-self : start; }
  #item3 { justify-self:end; align-self:end }
``&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Days 15 ~ 16: CSS Grid]]></title><description><![CDATA[Design Principles, CSS Grid CSS Grid is a thing. For the following few days, let’s work a bit with CSS grids. It’s one dimension more than…]]></description><link>http://css.codinggirls.sg/day-15-16--grid/</link><guid isPermaLink="false">http://css.codinggirls.sg/day-15-16--grid/</guid><pubDate>Wed, 13 Mar 2019 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;Design Principles, CSS Grid&lt;/h1&gt;
&lt;p&gt;CSS Grid is a thing.&lt;/p&gt;
&lt;p&gt;For the following few days, let’s work a bit with CSS grids.&lt;/p&gt;
&lt;p&gt;It’s one dimension more than &lt;code class=&quot;language-text&quot;&gt;flexbox&lt;/code&gt;, so it’s one dimension more complex. But it’s one dimenion more fun!&lt;/p&gt;
&lt;h2&gt;Objectives&lt;/h2&gt;
&lt;p&gt;There are so many ways to implement &lt;a href=&quot;https://dribbble.com/shots/4211796-Design-Principles&quot;&gt;this design&lt;/a&gt; that I cannot help but urge everyone to give it a try.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.dribbble.com/users/194964/screenshots/4211796/design_principles.gif&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://dribbble.com/shots/4211796-Design-Principles&quot;&gt;Design Principles&lt;/a&gt; by &lt;a href=&quot;https://dribbble.com/hrvoje-grubisic&quot;&gt;Hrvoje Grubisic&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Reading&lt;/h2&gt;
&lt;p&gt;Of course, we’ll be reading &lt;a href=&quot;https://www.w3.org/TR/css-grid-1/&quot;&gt;CSS Grid Layout Module 1&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It’s a big chunk, let’s just read the first 3 chapters for now.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Study Notes: Reading CSS Variables]]></title><description><![CDATA[Original post by tae: Reading CSS Variables #TIL CSS Variables Level 1 Introduction Many of the values in the CSS file will be duplicate…]]></description><link>http://css.codinggirls.sg/notes-css-variables-tae/</link><guid isPermaLink="false">http://css.codinggirls.sg/notes-css-variables-tae/</guid><pubDate>Tue, 12 Mar 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Original post by &lt;a href=&quot;https://github.com/Ta2Rim&quot;&gt;tae&lt;/a&gt;: &lt;a href=&quot;https://gist.github.com/Ta2Rim/6fc0aeda85a585a22ee5f56adda9bda0&quot;&gt;Reading CSS Variables&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;#TIL CSS Variables Level 1&lt;/h1&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Many of the values in the CSS file will be duplicate data. It may error-prone and diffcult, also not be ameanable to Find-and-Replace.
This module introduces a family of custom author-defined properties known collectively as custom properties. One only has to change the value once, in the custom property, and the change will propagate to all uses of that variable automatically.&lt;/p&gt;
&lt;h2&gt;The &lt;code class=&quot;language-text&quot;&gt;--*&lt;/code&gt; family of properties : Defining Custom Properties&lt;/h2&gt;
&lt;p&gt;A &lt;strong&gt;custom property&lt;/strong&gt; is any property whose name starts with two dashes like &lt;code class=&quot;language-text&quot;&gt;--foo&lt;/code&gt;
The &lt;code class=&quot;language-text&quot;&gt;&amp;lt;custom-property-name&gt;&lt;/code&gt; production corresponds to this : it’s defined as any valid identifier that starts with two dashes.&lt;/p&gt;
&lt;p&gt;Unlike other CSS properties, custom property names are case-sensitive.&lt;/p&gt;
&lt;p&gt;The CSS-wide keywords can be used in custom properties, with the same meaning as in any another property.&lt;/p&gt;
&lt;p&gt;** &lt;a href=&quot;https://www.w3.org/TR/css3-values/#common-keywords&quot;&gt;CSS-wide keywords: initial, inherit and unset&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Custom Property Value Syntax&lt;/h2&gt;
&lt;p&gt;The allowed syntax for custom properties is permissive. The &lt;declaration-value&gt; production matches any sequence of one or more tokens, so long as the sequence does not contain &lt;bad-string-token&gt;, &lt;bad-url-token&gt;, un matched &amp;#x3C;-) token&gt; , or&amp;#x3C;}-token&gt; or top-level &lt;semicolon-tken&gt; tokens or &lt;delim-token&gt; tokens with a value of ’!’&lt;/p&gt;
&lt;p&gt;For example, the following is a valid custom property:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;  --foo: if(x &gt; 5) this.width = 10;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While this value is obviously useless as a variable, as it would be invalid in any normal property, it might be read and acted on by Javascript.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The initial value of a custom property is an empty value; that is, nothing at all. This initial value has a special interaction with the &lt;code class=&quot;language-text&quot;&gt;var()&lt;/code&gt; notation.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;custom properties are ordinary properties, so they can be declared on any element…&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;are resolved with the normal inheritance and cascade rules&lt;/li&gt;
&lt;li&gt;can be conditional with &lt;code class=&quot;language-text&quot;&gt;@media&lt;/code&gt; and other conditional rules&lt;/li&gt;
&lt;li&gt;can be usedin HTML’s style attribute&lt;/li&gt;
&lt;li&gt;can be read or set using the CSSOM&lt;/li&gt;
&lt;li&gt;etc&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;it’s important to note that custom properties resolve any &lt;code class=&quot;language-text&quot;&gt;var()&lt;/code&gt; functions in their values at computed-value time, which occurs before the value is inherited. In general cyclic dependencies occur only when multiple custom properties on the same element refer to each other;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;valid example&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;  &amp;lt;one&gt;&amp;lt;two&gt;&amp;lt;three/&gt;&amp;lt;/two&gt;&amp;lt;/one&gt;
  one { --foo : 10px; }
  two { --bar : calc(var(--foo) + 10px); }
  three { --foo : calc(var(--bar) + 10px); }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;the &lt;code class=&quot;language-text&quot;&gt;var()&lt;/code&gt; notation : Using Cascading Variblaes&lt;/h2&gt;
&lt;p&gt;The value of a custom property can be subsitituted into the value of another property with the &lt;code class=&quot;language-text&quot;&gt;var()&lt;/code&gt; function.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;  **var()** = var( &amp;lt;custom-property-name&gt; [, &amp;lt;declaration-value&gt; ]? )
  
  &amp;lt;custom-property-name&gt; - name of custom property to be subsititued.
  &amp;lt;declaration-value&gt; - if provided, is a fallback value used as the substituion value when the referenced custom property is invalid.1

  var(--foo, red, value)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But the &lt;code class=&quot;language-text&quot;&gt;var()&lt;/code&gt;function cannot be used as property names, selectors, or anything else besides property values.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;  author can&apos;t build up a single token where part of it is provided by a variable
  
  .foo {
    --gap: 20;
    margin-top: var(--gap)px;
   }
   
   
   valid example
   
  .foo {
    --gap: 20;
    margin-top: calc(var(--gap) * 1px);
   }
   
    &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;** &lt;code class=&quot;language-text&quot;&gt;var()&lt;/code&gt; functions are substitued at computed-value time. If a declaration, once all &lt;code class=&quot;language-text&quot;&gt;var()&lt;/code&gt; functions are substitued in, is invalid, the declaration is invalid at computed value time.**&lt;/p&gt;
&lt;h3&gt;Invalid Variables&lt;/h3&gt;
&lt;p&gt;A declaration can be invalid at computed-value time if it contains a &lt;code class=&quot;language-text&quot;&gt;var()&lt;/code&gt; that references a custom property with its initail value.
When this happens, the computed value of the property is either the property’s inherited value or its initial value depending on whether the property is inherited or not, repectively as if the property’s value had been specified as the ‘unset’ keyword.&lt;/p&gt;
&lt;h3&gt;Variables in Shorthand Properties&lt;/h3&gt;
&lt;p&gt;The use of &lt;code class=&quot;language-text&quot;&gt;var()&lt;/code&gt; functions in shorthand properties presents some unique difficulties.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;margin : 10px -&gt; margin-top: 10px; margin-left:10px; margin-bottom:10px; margin-right:10px;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If a &lt;code class=&quot;language-text&quot;&gt;var()&lt;/code&gt; functions is used in a shorthand, however, one can’t tell what values are meant to go where; it may in fact be impossible to separate it out at parse time.&lt;/p&gt;
&lt;p&gt;To get around this, implementations must fil in longhands with a special, unobservable-to-authors pending-substitution value that indicates the shorthand contains a variable, and thus the longhand’s value is pending variable substitution.&lt;/p&gt;
&lt;h2&gt;APIs&lt;/h2&gt;
&lt;p&gt;All custom property declarations have the case-insensitive flag set.&lt;/p&gt;
&lt;h2&gt;Serializing custom Properties&lt;/h2&gt;
&lt;p&gt;Custom property names must be serialized with the casing as provided by the author.&lt;/p&gt;
&lt;h2&gt;What’s more?&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://drafts.csswg.org/css-extensions/&quot;&gt;CSS-EXTENSIONS&lt;/a&gt; - custom properties can also be used as actual custom properties, parsed by and acted on by script. I’ts expcted that the CSS Extensions spec will expand on these use-cases and make them easier to do.&lt;/p&gt;
&lt;p&gt;Fallback - With fallback, the component author can supply defaults, so the app author only needs to supply values for the values for the variables they wish to override.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Days 13 ~ 14: Ticket]]></title><description><![CDATA[Want to see a Hokusai movie together? So I went to this Hokusai movie the other day.
And I thought, what would a ticket designed for The…]]></description><link>http://css.codinggirls.sg/day-13-14--ticket/</link><guid isPermaLink="false">http://css.codinggirls.sg/day-13-14--ticket/</guid><pubDate>Mon, 11 Mar 2019 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;Want to see a Hokusai movie together?&lt;/h1&gt;
&lt;p&gt;So I went to this Hokusai movie the other day.
And I thought, what would a ticket designed for The Wave look like?&lt;/p&gt;
&lt;p&gt;Shamelessly squeeze in &lt;a href=&quot;https://codepen.io/wgao19/pen/pqmVMg&quot;&gt;design of mine for a movie ticket here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://codepen.io/wgao19/pen/pqmVMg&quot;&gt;&lt;div&gt;&lt;iframe 
        height=&apos;400&apos; 
        scrolling=&apos;no&apos; 
        src=&apos;//codepen.io/wgao19/embed/preview/pqmVMg/?height=400&amp;theme-id=dark&amp;default-tab=html,result&apos; 
        frameborder=&apos;no&apos; 
        allowtransparency=&apos;true&apos; 
        allowfullscreen=&apos;true&apos; 
        style=&apos;width: 100%;&apos;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Objective&lt;/h2&gt;
&lt;p&gt;Implement a movie ticket, the one above or your design.
If you are out of ideas, find some movie tickets that you like and get inspired from there :)&lt;/p&gt;
&lt;h2&gt;Reading&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.w3.org/TR/css-variables-1/&quot;&gt;CSS Variables Level 1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you’ve read the code in our challenges, you’d notice a heavy use of CSS variables.
They’re very handy to help reuse quantities.
Let’s read and gain some further understanding about it.&lt;/p&gt;
&lt;!-- TODO: Add questions here --&gt;</content:encoded></item><item><title><![CDATA[Study Notes: Reading CSS Image Values and Replaced Content Module Level3]]></title><description><![CDATA[Original post by tae: Reading CSS Image Values and Replaced Content Module Level3 In markdown I wrote, the content is simillar 99% with…]]></description><link>http://css.codinggirls.sg/notes-css-images-tae/</link><guid isPermaLink="false">http://css.codinggirls.sg/notes-css-images-tae/</guid><pubDate>Sun, 10 Mar 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Original post by &lt;a href=&quot;https://github.com/Ta2Rim&quot;&gt;tae&lt;/a&gt;: &lt;a href=&quot;https://gist.github.com/Ta2Rim/29af0d2b9ca5725982fde476a82e7a6c&quot;&gt;Reading CSS Image Values and Replaced Content Module Level3&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In markdown I wrote, the content is simillar 99% with specfication.. because I’ve never known the spec exists relates to Image Values and Replaced Content. And I newly learned about css grammer. It’s brilliant. I may be able to make my own language with it. I wish I could read English well. I feel the limitation of to get those spec. it’s not that 100% clear for me.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And I get little confused about diffrence with specs and real implementation of UA. I don’t know which one I have to study.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this specification, &lt;code class=&quot;language-text&quot;&gt;&amp;lt;image&gt;&lt;/code&gt; doesn’t mean that HTML tag. &lt;code class=&quot;language-text&quot;&gt;&amp;lt;image&gt;&lt;/code&gt; means CSS type.&lt;/p&gt;
&lt;h1&gt;Reading CSS Image Values and Replaced Content Module Level - #TIL&lt;/h1&gt;
&lt;p&gt;This Module introduces additinal ways of representing 2D images, for example as a list of URILs denoting fallbacks, or as a gradient.&lt;/p&gt;
&lt;p&gt;This module also defines several properties for manipulating raster images and for sizing or positioning replaced elements such as images within the box determined by the CSS layout algorithms.&lt;/p&gt;
&lt;p&gt;It also defines in a generic way CSS’s sizing algorithm for images and other replaced elements.&lt;/p&gt;
&lt;h2&gt;Value : the &amp;#x3C;resolution&gt; type&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;dpi&lt;/em&gt; : dots per inch&lt;/li&gt;
&lt;li&gt;&lt;em&gt;dpcm&lt;/em&gt; : dots per centimeter&lt;/li&gt;
&lt;li&gt;&lt;em&gt;dppx&lt;/em&gt; : dots per px unit&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Value : the &amp;#x3C;image&gt; type - denotes a 2D image&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;image = &amp;lt;url&gt; | &amp;lt;image-list&gt; | &amp;lt;element-reference&gt; | gradient&lt;/code&gt;
In some case, an image is invalid, such as a &lt;code class=&quot;language-text&quot;&gt;&amp;lt;url&gt;&lt;/code&gt; pointing to a resource that is not valid image format. An invalid image is rendered as a solid-color transparent image with no intrinsic dimensions.&lt;/p&gt;
&lt;h3&gt;url notation : &lt;code class=&quot;language-text&quot;&gt;background-image : url(bg.png)&lt;/code&gt;&lt;/h3&gt;
&lt;h3&gt;image notation&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;image-list&gt; = image( [ &amp;lt;image-decl&gt; , ]* [ &amp;lt;image-decl&gt; | &amp;lt;color&gt; ] )
&amp;lt;image-decl&gt; = [&amp;lt;url&gt; | &amp;lt;string&gt; | &amp;lt;element-reference&gt; ]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; &lt;code class=&quot;language-text&quot;&gt;image()&lt;/code&gt; function allows an author to :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;clip out a portion of an image&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;  &lt;code class=&quot;language-text&quot;&gt;background-image : image(&apos;sprites.svg#xywh=40,0,20,20&apos;)&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;background-image : url(&apos;fallback.png&apos;); /* old UAs */
background-image : image(&apos;sprites.png#xywh=10,30,60,20&apos;); /* new UAs */&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;specify fallback images&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;background-image : image(&apos;tree.svg&apos;, &apos;tree.png&apos;, &apos;tree.gif&apos;);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;background-image : image(&apos;tree.svg&apos;, &apos;tree.png&apos;, &apos;tree.gif&apos;, #000000);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;background-image : image(&apos;nyan-cat.gif#frame-5&apos;, &apos;nyan-cat.png&apos;)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;use a solid color&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; &lt;code class=&quot;language-text&quot;&gt;background-image : image(rgba(0, 0, 255, .5)), url(&apos;bg-image.png&apos;);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt; In the above, the background is the image ‘bg-image.png’, overlaid with partially-transparent&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;annotate an image with a directionality&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Value : gradients&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt; &amp;lt;gradient = [
   &amp;lt;linear-gradient&gt; | &amp;lt;radial-gradient&gt; |
   &amp;lt;repeating-linear-gradient | &amp;lt;repeating-radial-gradient&gt; ]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;  As with the other &lt;code class=&quot;language-text&quot;&gt;&amp;lt;image&gt;&lt;/code&gt; types defined in this specfication, gradients canbe used in any property that accepts images.
- &lt;code class=&quot;language-text&quot;&gt;background : linear-gradient(white, grey);&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;linear-gradients notation&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;  &amp;lt;linear-gradient&gt; = linear-gradient (
    [ [ &amp;lt;angle&gt; | to &amp;lt;side-or-corner&gt; ] ,]?
    &amp;lt;color-stop&gt;[, &amp;lt;color-stop]+
  )
  
  &amp;lt;side-or-corner&gt; = [left | right] || [top | bottom]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first argument to the function specifies the gradient line, thiat gives the gradient a direction and determine how color-stops are positioned. it defaults to ‘to bottom’.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;linear-gradient(yellow, blue) /*defaults to &apos;to bottom&apos;*/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;linear-gradient(to left top, yellow, blue)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;linear-gradient(-45deg, blue, yellow)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;linear-gradient(yellow, blue 20%, #0f0)&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;what can I do with linear-gradient?&lt;/h4&gt;
&lt;p&gt; magical things. - &lt;a href=&quot;https://codepen.io/yuanchuan/pen/NLXZLm&quot;&gt;&lt;div&gt;&lt;iframe 
        height=&apos;400&apos; 
        scrolling=&apos;no&apos; 
        src=&apos;//codepen.io/yuanchuan/embed/preview/NLXZLm/?height=400&amp;theme-id=dark&amp;default-tab=html,result&apos; 
        frameborder=&apos;no&apos; 
        allowtransparency=&apos;true&apos; 
        allowfullscreen=&apos;true&apos; 
        style=&apos;width: 100%;&apos;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;radial-gradients notation&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;  &amp;lt;radial-gradient&gt; = radial-gradient(
    [ [ circle || &amp;lt;length&gt; ] [ at &amp;lt;position&gt; ]? , |
      [ ellipse || [ &amp;lt;length&gt; | &amp;lt;percentage ]{2} ] [ at &amp;lt;position&gt; ]? , |
      [ [ circle | ellipse ] || &amp;lt;extent-keyword&gt; ]
      at &amp;lt;positon&gt;,
    ]?
    &amp;lt;color-stop&gt; [ , &amp;lt;color-stop&gt; ]+
  )
  &amp;lt;extent-keyword&gt; = closest-corner | closest-side | fathest-corner | farthest-side&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;radial-graident(5em circle at top left, yellow, blue)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;position&gt;&lt;/code&gt; is also used for ‘background-position’.
&lt;code class=&quot;language-text&quot;&gt;&amp;lt;shape&gt;&lt;/code&gt; can be either ‘circle’ or ‘ellipsis’, determines whether the gradient’s ending shape is a circle or an ellipsis. If &lt;code class=&quot;language-text&quot;&gt;&amp;lt;shape&gt;&lt;/code&gt; is omitted, the ending shape defaults to a circle if the &lt;size&gt; is a single &lt;length&gt;, and to an ellipse otherwise.&lt;/p&gt;
&lt;h4&gt;Placing Color Stops&lt;/h4&gt;
&lt;p&gt;Color-stops are placed on a &lt;strong&gt;gradient ray&lt;/strong&gt;, simillar to the gradient line of linear gradients. The gradient ray is anchored at the center of the gradient and extends toward the right. The 0% location is at the start of the gradient ray, and the 100% location is on the point where the gradient ray intersects the ending shape.&lt;/p&gt;
&lt;p&gt;The point’s color is then the color of the gradient ray at the location where this ellipse intersects it.&lt;/p&gt;
&lt;h4&gt;what can I do with radial-gradient?&lt;/h4&gt;
&lt;p&gt; magical things. too. - &lt;a href=&quot;https://codepen.io/yuanchuan/pen/JxjJJL&quot;&gt;&lt;div&gt;&lt;iframe 
        height=&apos;400&apos; 
        scrolling=&apos;no&apos; 
        src=&apos;//codepen.io/yuanchuan/embed/preview/JxjJJL/?height=400&amp;theme-id=dark&amp;default-tab=html,result&apos; 
        frameborder=&apos;no&apos; 
        allowtransparency=&apos;true&apos; 
        allowfullscreen=&apos;true&apos; 
        style=&apos;width: 100%;&apos;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;&lt;code class=&quot;language-text&quot;&gt;repeating-linear-gradient()&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;repeating-radial-gradient&lt;/code&gt; : Repeating Gradients&lt;/h4&gt;
&lt;p&gt;Unlike &lt;linear-gradient&gt; and &lt;radial-gradient&gt;, When rendered, the color-stops are repeated infinitely in both directions, with their positions shifted by multiples of the diffrence between the last specified color-stop’s position and the first specfied color-stop’s position.&lt;/p&gt;
&lt;p&gt;  &lt;code class=&quot;language-text&quot;&gt;repeating-linear-graident(red 10px, blue 50px)&lt;/code&gt; is equivalent to &lt;code class=&quot;language-text&quot;&gt;linear-gradient(..., red -30px, blue 10px, red 10px, blue 50px, red 50px, blue 90px, ...)&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;Gradient Color-Stops&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;color-stop&gt; = &amp;lt;color&gt; [ &amp;lt;percentage&gt; | &amp;lt;length&gt; ]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Color-stops are points placed along the line defined by the gradient line at the beginning rule.
At each color-stop, the line is the color of the color-stop. Betwwen two color-stops, the line’s color is linearly interpolated between the colors of the two color-stops. &lt;/p&gt;
&lt;p&gt;Even if author doesn’t write position, UA set its position corresponding CSS rules&lt;/p&gt;
&lt;h2&gt;CSS &amp;#x3C;=&gt; Object Negotiation&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;When an iamge or object is specified in a document, such as through a &lt;code class=&quot;language-text&quot;&gt;url()&lt;/code&gt; value in a &lt;code class=&quot;language-text&quot;&gt;background-image&lt;/code&gt; property, CSS queries the object for its &lt;em&gt;intrinsic dimensions&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;CSS then computes a concrete object size using &lt;em&gt;intrinsic dimensions,&lt;/em&gt; the specified size. This defines the size and position of the region the object will render in.&lt;/li&gt;
&lt;li&gt;CSS asks the object to render itself at the concrete object size. The object may adjust itselft to match the concrete object size in some way to satisfy sizing constraints of its own, not CSS.&lt;/li&gt;
&lt;li&gt;Unless otherwise specified by CSS, the object is then clipped to the &lt;strong&gt;concrete object size&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Concrete Object Size Resolution&lt;/h2&gt;
&lt;h3&gt;How do UA define &lt;strong&gt;concrete object size&lt;/strong&gt;?&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Default Sizing Algorithm.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cover and Contain Consraint Sizing.&lt;/p&gt;
&lt;h4&gt;exmaples&lt;/h4&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;property name&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;sizing&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;default object size&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;remarks&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;background-image&lt;/code&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;default sizing algorithm with no specified size&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;background-size&lt;/code&gt; property can give a sizing constraint, invoking either the default sizing algorithm&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;list-style-image&lt;/code&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;default sizing algorithm with no specified size.&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;1em square&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;border-image&lt;/code&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;default sizing algorithm&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;sized twice. tie first sizing operation is defulat sizing algorithm with no specified size, the second operaiton is default sizing algorithm is used to determine an initial size for each slice with the corresponing border image area part&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;cursor&lt;/code&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;UA-defined size&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;content&lt;/code&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;[CSS21] note tat such anonymous elements have al their non-inherited properties set to their initial value&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;&lt;code class=&quot;language-text&quot;&gt;object-fit&lt;/code&gt; property : Sizing Objects&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;object-fit&lt;/code&gt; property specifies how the contents of a replaced element should be fitted to the box stablished by its used height and width. it concerns which object sizing algorithm is used.
it has smilliar semantics to the SVG11 - &lt;code class=&quot;language-text&quot;&gt;preserveAspectRatio&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;value : fill | contain | cover | none | scale-down
&lt;img src=&quot;https://user-images.githubusercontent.com/41318449/54081232-7027bb80-4344-11e9-9f9c-59ee1547ca20.png&quot; alt=&quot;img_scale&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;code class=&quot;language-text&quot;&gt;object-position&lt;/code&gt; property : Positioning Objects.&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;object-position&lt;/code&gt; property determines the alignment of the replaced element inside its box.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;value : &amp;#x3C;position&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Image Processing&lt;/h2&gt;
&lt;h3&gt;&lt;code class=&quot;language-text&quot;&gt;image-resolution&lt;/code&gt; property : Overriding Image Resolutions.&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;image resoltion is defined as the number of image pixels per unit length. Some image formats can record information about the resolution of images. this information can be helpful when determinig the actual size of the image in the formatting process.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;image-resolution&lt;/code&gt; property specifies the intricsic resloution of all raster iamges used in or on the element. If affects both content iages and decorative images.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;As vector images such as SVG do not have an intrinsic resolution, this property has no effect on vectior images&lt;/p&gt;
&lt;h4&gt;example&lt;/h4&gt;
&lt;p&gt;Printers tend to have higher resolution than computer motinors. due to this, and iamge that looks fine on the screen may look pixellated when printed out. The &lt;code class=&quot;language-text&quot;&gt;image-resolution&lt;/code&gt; property can be used to embed a high-resolution image into the document and main tain an appropriate size, ensureing attractive display both on screen and on paper&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;@media print(
img{
image-resolution : 300dpi;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;code class=&quot;language-text&quot;&gt;image-orientation&lt;/code&gt; property : Orienting an Image on the page&lt;/h3&gt;
&lt;p&gt;If a picture is taken with a camera turned on its side, or a document isn’t positioned correctly within a scanner, the resultant image maybe ‘sideways’ or even upside down. The &lt;code class=&quot;language-text&quot;&gt;image-orientation&lt;/code&gt; property provides a way to apply an ‘out-of-band’ rotation to image source data to correctly orient an image. (But it’s not for arbitrary rotation or flipping the image. it should be used to correct incorrectly-oriented images)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;value : &amp;#x3C;angle&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/41318449/54081632-15de2900-434b-11e9-852a-69965f51d2bd.png&quot; alt=&quot;image&quot;&gt;
The computed value of the property is calculated by rounding the specified angle to the nearest quarter-turn.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Study Notes: How I Started Reading `mix-blend-mode` and What They Are Creating with It]]></title><description><![CDATA[Original post: How I Started Reading mix-blend-mode and What They Are Creating with It by Wei. How I Started Reading  and What They Are…]]></description><link>http://css.codinggirls.sg/notes-mix-blend-mode/</link><guid isPermaLink="false">http://css.codinggirls.sg/notes-mix-blend-mode/</guid><pubDate>Fri, 08 Mar 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Original post: &lt;a href=&quot;https://dev.wgao19.cc/2019-03-08__mix-blend-mode/&quot;&gt;How I Started Reading mix-blend-mode and What They Are Creating with It&lt;/a&gt; by &lt;a href=&quot;http://wgao19.cc&quot;&gt;Wei&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;How I Started Reading &lt;code class=&quot;language-text&quot;&gt;mix-blend-mode&lt;/code&gt; and What They Are Creating with It&lt;/h1&gt;
&lt;p&gt;I was working on &lt;a href=&quot;https://dribbble.com/shots/3348456-Nintendo-Switch&quot;&gt;this Dribbble Design&lt;/a&gt; by &lt;a href=&quot;https://dribbble.com/mantia&quot;&gt;Louie Mantia&lt;/a&gt;. At my first sight, all features of this design seemed fairly straightforward, except for the intersection curves near the handhelds.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://d2mxuefqeaa7sj.cloudfront.net/s_6D2C6F51B725DA0551B79F1B7E3556E8D4F31794A6A8479F1746F2742692D440_1551802222782_image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;I found my trick to intersect the divs. In a few words, I gave the blue region &lt;code class=&quot;language-text&quot;&gt;overflow: hidden&lt;/code&gt;, created an extra div that lives inside the blue, make it same size as the red region, and match the position with the exact offset. It made me smile and proud. &lt;a href=&quot;https://codepen.io/wgao19/pen/vvZoQW&quot;&gt;CodePen&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;But I cannot stop but wonder: When the browser renders the second layer, whichever that is, it should already know about the first layer. Then, wouldn’t it be easy for the browsers to do some kind of calculation with the new layer it’s rendering next, and produce some kind of mixing effect?&lt;/p&gt;
&lt;p&gt;A few searches landed me to &lt;code class=&quot;language-text&quot;&gt;mix-blend-mode&lt;/code&gt; specified in &lt;a href=&quot;https://drafts.fxtf.org/compositing-1/#canvascompositingandblending&quot;&gt;Composing and Blending Level 1&lt;/a&gt;. This set of specifications defines how shapes and images are combined into a single image.&lt;/p&gt;
&lt;h2&gt;Reading the specs&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://drafts.fxtf.org/compositing-1&quot;&gt;Composing and blending&lt;/a&gt; describes exactly how to produce the final graphics when they are stacked together. “Composing and blending” is one single step (not two steps). &lt;a href=&quot;https://drafts.fxtf.org/compositing-1/#compositingandblendingorder&quot;&gt;It happens as the final step, after, &lt;em&gt;filtering&lt;/em&gt;, &lt;em&gt;clipping&lt;/em&gt;, and &lt;em&gt;masking&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Composing uses the &lt;a href=&quot;https://drafts.fxtf.org/compositing-1/#advancedcompositing&quot;&gt;&lt;em&gt;Porter-Duff&lt;/em&gt; composing&lt;/a&gt; method, which, given two graphics — a source and a destination — specifies 12 different modes how they shall be combined.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://d2mxuefqeaa7sj.cloudfront.net/s_6D2C6F51B725DA0551B79F1B7E3556E8D4F31794A6A8479F1746F2742692D440_1551804900582_image.png&quot; alt=&quot;The Porter-Duff Operators, image credits to http://ssp.impulsetrain.com/porterduff.html&quot;&gt;&lt;/p&gt;
&lt;p&gt;The Porter-Duff Operators, image credits to &lt;a href=&quot;http://ssp.impulsetrain.com/porterduff.html&quot;&gt;http://ssp.impulsetrain.com/porterduff.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://drafts.fxtf.org/compositing-1/#blending&quot;&gt;&lt;em&gt;Blending&lt;/em&gt;&lt;/a&gt;&lt;em&gt;, then,&lt;/em&gt; lets you specify a function that calculates the final color in this process.&lt;/p&gt;
&lt;p&gt;The specs does a really good job explaining the whole process, including what each of the blending modes feels intuitively and it gives you a graphical example with that yellow duck in the bathtubs blended with a rainbow. Even with my college math nearly all returned to my professors I was able to deduce some of its conclusion just by looking. I find this piece of specs way more reader-friendly than this &lt;a href=&quot;https://www.w3.org/TR/CSS2/zindex.html&quot;&gt;&lt;em&gt;elaborate description of stacking context&lt;/em&gt;&lt;/a&gt; lol.&lt;/p&gt;
&lt;p&gt;It explains what “multiply” means in blending with an example:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The source color is multiplied by the destination color and replaces the destination.
The resultant color is always at least as dark as either the source or destination color. Multiplying any color with black results in black. Multiplying any color with white preserves the original color.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://drafts.fxtf.org/compositing-1/examples/multiply.png&quot; alt=&quot;example of multiply blending&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://codepen.io/careecodes/pen/AXPaWY&quot;&gt;Here&lt;/a&gt; is a pen that puts all the blending modes for select, and displays the visual effect on different input colors.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Limits&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It is subject to (rather poor) &lt;a href=&quot;https://caniuse.com/#search=mix-blend-mode&quot;&gt;browser compatibility&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Resulting color is subject to limited functions with two color inputs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Composing and blending is really cool, but not without its limit. Back to the example I began with, the exact effect cannot be easily produced with &lt;code class=&quot;language-text&quot;&gt;mix-blend-mode&lt;/code&gt;, and do you see why?&lt;/p&gt;
&lt;p&gt;The limit is, the resulting color must be the output of a blending function calculated by taking the source and the backdrop colors. If you want an arbitrary color that does not depend on those input colors, then you won’t get the color by simply picking a &lt;code class=&quot;language-text&quot;&gt;mix-blend-mode&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The Nintendo Switch design happened to have only used the concept of an intersection. The darker blue in the intersection, despite strikingly beautiful, is not achievable with any one of the blending modes.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Performance&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I have not found a way to benchmark the performance on this property. But I noticed with Chrome that it almost always flickers the two separate layers before blending, sometimes one-by-one. And with some more complex blending my laptop starts to roar.&lt;/p&gt;
&lt;h2&gt;What they are creating with &lt;code class=&quot;language-text&quot;&gt;mix-blend-mode&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;To learn about how designers and developers have already been using &lt;code class=&quot;language-text&quot;&gt;mix-blend-mode&lt;/code&gt; , I did &lt;a href=&quot;https://codepen.io/search/pens?q=mix-blend-mode&amp;#x26;page=1&amp;#x26;order=popularity&amp;#x26;depth=everything&quot;&gt;a search in CodePen&lt;/a&gt;. And I found many beautiful designs which I’ll just put into a few categories for easier reference. But please don’t let them restrict your creativity.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Image + single color text to create masking effect / knockout texts&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Check out this one-liner way of image masking, duos, &lt;a href=&quot;https://codepen.io/thebabydino/pen/qONMLv&quot;&gt;CodePen: Knockout Text&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/M6ixQpz.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://codepen.io/stacy/pen/gLmQPY&quot;&gt;CodePen: Knockout Text with CSS Blend Modes&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/uwX8nbO.png&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RGB with &lt;code class=&quot;language-text&quot;&gt;mix-blend-mode: screen&lt;/code&gt; for an illuminating feel&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This next one that came up has a cuteness in its 蠢萌 *&lt;em&gt;with those letters rolling around&lt;/em&gt;.* I cannot find a better term. Sorry non-Chinese speakers 😂&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://codepen.io/electerious/pen/pbBoqm&quot;&gt;CodePen: Letter mix blend mode&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://dribbble.com/shots/2903238-A&quot;&gt;Dribbble Design: A&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.dribbble.com/users/766394/screenshots/2903238/a.gif&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://codepen.io/stevn/pen/kXyKjQ&quot;&gt;Android Nougat update animation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/d9dEPSu.png&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Using composition to create interesting UX that is otherwise complex to implement&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Next, I find this interaction which, if without the knowledge of &lt;code class=&quot;language-text&quot;&gt;mix-blend-mode&lt;/code&gt;, would be a mystery of how to create. JavaScript?&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://codepen.io/maddesigns/pen/dpGVGw&quot;&gt;CodePen: CSS mix-blend-mode - black/white text - with pseudo elements&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/pwlJYFu.png&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Typographic designs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://codepen.io/keukenrolletje/pen/YqdowX&quot;&gt;Swiss css cards&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/LMI3gqM.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://codepen.io/hollyos/pen/yzPrMo&quot;&gt;CodePen: Quote Page&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This interesting design uses overlay to let the background hue over the text color.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/Zwlezt1.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;I have created a &lt;a href=&quot;https://codepen.io/collection/DkwvRw/&quot;&gt;CodePen Collection&lt;/a&gt; for some interesting design implementations I’ve seen along the way, cuz I want to be the Don Quijote for developers x designers :]&lt;/p&gt;
&lt;h2&gt;Links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://drafts.fxtf.org/compositing-1/&quot;&gt;Composing and Blending Level 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ssp.impulsetrain.com/porterduff.html&quot;&gt;Porter Duff&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://caniuse.com/#search=mix-blend-mode&quot;&gt;caniuse &lt;code class=&quot;language-text&quot;&gt;mix-blend-mode&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://codepen.io/search/pens?q=mix-blend-mode&amp;#x26;page=1&amp;#x26;order=popularity&amp;#x26;depth=everything&quot;&gt;CodePen search for &lt;code class=&quot;language-text&quot;&gt;mix-blend-mode&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Days 11 ~ 12: Repeating Gradient]]></title><description><![CDATA[Hypnotic Background The fact that CSS can be used to generate strikingly beautiful patterns excites me. It sometimes feels slightly out of…]]></description><link>http://css.codinggirls.sg/day-11-12--repeating-gradient/</link><guid isPermaLink="false">http://css.codinggirls.sg/day-11-12--repeating-gradient/</guid><pubDate>Thu, 07 Mar 2019 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;Hypnotic Background&lt;/h1&gt;
&lt;p&gt;The fact that CSS can be used to generate strikingly beautiful patterns excites me. It sometimes feels slightly out of its scope but, isn’t it amazing?&lt;/p&gt;
&lt;h2&gt;Objective&lt;/h2&gt;
&lt;p&gt;Implement the following design:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;We’ll worry about the animation later, implement the static pattern first.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.dribbble.com/users/90923/screenshots/2859124/dcx-hypno.gif&quot;&gt;&lt;/p&gt;
&lt;p&gt;Original design: &lt;a href=&quot;https://dribbble.com/shots/2859124-DCX-Hypnotic-Background&quot;&gt;DCX - Hypnotic Background&lt;/a&gt; by &lt;a href=&quot;https://dribbble.com/ndimatteo&quot;&gt;Nick DiMatteo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://codepen.io/wgao19/pen/pqpmgK&quot;&gt;Just in case you need a hint&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://codepen.io/wgao19/pen/pqpmgK&quot;&gt;&lt;div&gt;&lt;iframe 
        height=&apos;400&apos; 
        scrolling=&apos;no&apos; 
        src=&apos;//codepen.io/wgao19/embed/preview/pqpmgK/?height=400&amp;theme-id=dark&amp;default-tab=html,result&apos; 
        frameborder=&apos;no&apos; 
        allowtransparency=&apos;true&apos; 
        allowfullscreen=&apos;true&apos; 
        style=&apos;width: 100%;&apos;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Reading&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.w3.org/TR/css3-images/&quot;&gt;CSS Image Values and Replaced Content Level 3&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Study Notes: CSS Selectors]]></title><description><![CDATA[Original post by swifty_star4: Understanding about CSS Selectors Understanding about CSS Selectors CSS Selectors Definition CSS selectors…]]></description><link>http://css.codinggirls.sg/notes-css-selectors-swiftystar4/</link><guid isPermaLink="false">http://css.codinggirls.sg/notes-css-selectors-swiftystar4/</guid><pubDate>Thu, 07 Mar 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Original post by &lt;a href=&quot;https://github.com/swiftystar4&quot;&gt;swifty_star4&lt;/a&gt;: &lt;a href=&quot;https://gist.github.com/swiftystar4/926f675e010d2d2532f1f00e38006a5a&quot;&gt;Understanding about CSS Selectors&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Understanding about CSS Selectors&lt;/h1&gt;
&lt;h2&gt;CSS Selectors&lt;/h2&gt;
&lt;h3&gt;Definition&lt;/h3&gt;
&lt;p&gt;CSS selectors are used to find or select HTML elements based on their element name, id, class, attribute and etc.&lt;/p&gt;
&lt;h3&gt;Different types of Selectors&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Universal Selectors&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Selects all elements and restricted to a specific namespace or to all namespaces.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Syntax&lt;/strong&gt;
&lt;code class=&quot;language-text&quot;&gt;* us | * *|*&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt; using * to select all elements of the document.&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Type Selectors&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Selects all elements that match the given node name.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Syntax&lt;/strong&gt; &lt;code class=&quot;language-text&quot;&gt;elementname&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt; input will match any &lt;code class=&quot;language-text&quot;&gt;&amp;lt;input&gt;&lt;/code&gt; element.&lt;/p&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;Attribute Selectors&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Select elements based on the value of the given attribute which have certain attributes defined inside the code.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Syntax&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;[attr]&lt;/code&gt; -&gt; Match when element sets “att” attribute (no matter what the value of the attribute)&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;[att = val]&lt;/code&gt; -&gt; Match when the element’s “att” attribute value (is exactly)&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;[att ~= val]&lt;/code&gt; -&gt; Represent an element with “att” attribute which the value is a white space-separated list of words, one of word is exactly “val”&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;[att|=val]&lt;/code&gt; -&gt; Represent an element with “att” attribute which exactly “att” or starts with “att” and followed by “-”&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;h1 [title] { color: blue }&lt;/code&gt; = matches all h1 elements that specify the “title” attribute (no matter what value)&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;span [class = example] { color: blue; }&lt;/code&gt; matches all span elements which “class” attributes has exactly the value&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;span[hello=&quot;Cleveland&quot;][goodbye=&quot;Columbus&quot;]&lt;/code&gt; { color: blue; } matches all span elements that “hello” attribute has value of “Cleverland” and “Goodbye” attribute has value of “Columbus”&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;a[rel~=&quot;copyright&quot;]&lt;/code&gt; value “copyright copyleft copyeditior” for “rel” attribute
&lt;code class=&quot;language-text&quot;&gt;a[href=&quot;http://www.w3.org/&quot;]&lt;/code&gt; match when “ref” has the value of “&lt;a href=&quot;http://www.w3.org/%E2%80%9D&quot;&gt;http://www.w3.org/”&lt;/a&gt;
matches the differences between “=” and “~”.&lt;/p&gt;
&lt;ol start=&quot;5&quot;&gt;
&lt;li&gt;ID Selectors&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Select an element based on the value of the id attribute. Only one with a given ID in a document.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Syntax&lt;/strong&gt; &lt;code class=&quot;language-text&quot;&gt;#idname&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt; &lt;code class=&quot;language-text&quot;&gt;#name&lt;/code&gt; will match the element that has the value of ID “name”.&lt;/p&gt;
&lt;h3&gt;Different types of Combination&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Adjacent Sibling Combination&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;E1 + E2 (subject of the selectors). The selector matches if E1 &amp;#x26; E2 share same parent in the code, E1 merge with E2 and ignore text and comments inside the code.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Syntax&lt;/strong&gt; &lt;code class=&quot;language-text&quot;&gt;h1 + h2 { margin-top: -5mm }&lt;/code&gt;
&lt;strong&gt;Example&lt;/strong&gt; E1 + E2 can merge together when the selector matches if E1 &amp;#x26; E2 share same parent inside the code.&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Child Combination&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Selects an element that an element is the child of some element and also made up of two or more selectors separated by “&gt;”.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Syntax&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Body &gt; P { line-height : 1.3}&lt;/code&gt; &gt; &lt;code class=&quot;language-text&quot;&gt;Div ol&gt; li p&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;P&lt;/code&gt; element that is descendant of LI&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;LI&lt;/code&gt; element must be the child of an OL element&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;OL&lt;/code&gt; element must be a descendant of DIV&lt;/p&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;Descendant Selectors&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Selects an element that the descendant of another element belongs in the document tree and also made of two or more selectors separated by white space.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Syntax&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;h1 { color : red }&lt;/code&gt; &gt; &lt;code class=&quot;language-text&quot;&gt;em { color : red }&lt;/code&gt; &gt; &lt;code class=&quot;language-text&quot;&gt;h1 em { color : blue }&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt; using same &lt;code class=&quot;language-text&quot;&gt;{ color : red }&lt;/code&gt; at h1, em but near h1, em change colour into blue instead of red.&lt;/p&gt;
&lt;h3&gt;Different types of Pseudo-Classes&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;:first-child pseudo-class&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Select an element that is the first child element of some other element&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;div &gt; p:first-child { text-indent: 0 } = selector&lt;/code&gt; matches any P element that is the first child of a DI element and rule suppresses indentation for the first paragraph of a DIV&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;* &gt; a:first-child = A&lt;/code&gt; is first child of any element
&lt;code class=&quot;language-text&quot;&gt;a:first-child&lt;/code&gt; = Same&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;link pseudo-classes: :link and :visited&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Mutally Exclusive&lt;/p&gt;
&lt;p&gt;Provide the pseudo-classes ‘:link’ and ‘:visited’ to differentiate them&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;:link&lt;/code&gt; applies link that haven’t yet been visited by the user&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;:visited&lt;/code&gt; applies once the link has been visited by the user&lt;/p&gt;
&lt;p&gt;Return a visited link to the (unvisited) ‘:link’ state at certain point of time&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;:link { color: red }&lt;/code&gt; = the link is not visited yet by the user&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;a.external:visited { color: blue }&lt;/code&gt; = the link is visited already by the user&lt;/p&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;language pseudo-class: :lang&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Possible to write selectors in CSS that match an element based on its assigned language.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;
HTML – combination of the “lang” attribute, META element and information from the protocol (such as HTTP Headers)&lt;/p&gt;
&lt;p&gt;XML – attribute using xml:lang&lt;/p&gt;
&lt;p&gt;C Language – &lt;code class=&quot;language-text&quot;&gt;:lang(C)&lt;/code&gt; matches if the element is in language C and based only on C (equal to hyphen-separated substring of, language value and ’|=’ operator&lt;/p&gt;
&lt;h3&gt;Different types of Pseudo-Elements&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;:first-line pseudo-element&lt;/p&gt;
&lt;p&gt;Select special styles to the contents of the first formatted line of a paragraph&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;p:first-line { text-transform: uppercase }&lt;/code&gt; = “change the letters of the first line of every paragraph to uppercase”. ” p:first-line ” didn’t select HTML element but select a pseudo-element that telling to insert uppercase at the beginning (first line) of every paragraph&lt;/p&gt;
&lt;p&gt;I wish I have a map of my mind, so I could find a way through my thoughts without always getting lost in fields of daydreams. And in the morning, they shook their pillows violently, hoping all the dreams they lost that night would tumble out. You can drive all night looking for the answer in the pouring rain. You want to find peace of mind looking for the answer inside the pouring rain.&lt;/p&gt;
&lt;p&gt;Output: &lt;strong&gt;I WISH I HAVE A MAP OF MY MIND, SO I COULD FIND A WAY THROUGH MY THOUGHTS WITHOUT ALWAYS GETTING LOST IN FIELDS OF DAYDREAMS.&lt;/strong&gt; And in the morning, they shook their pillows violently, hoping all the dreams they lost that night would tumble out. You can drive all night looking for the answer in the pouring rain. You want to find peace of mind looking for the answer inside the pouring rain.&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;:first-letter&lt;/code&gt; pseudo-element&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Select the first letter of the first line of a block and not preceded by other content such as images or inline tables on the line. - - Used for “initial caps” and “drop caps” that common typographical effects for the start of the paragraph.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;p { line-height: 1.1 }&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;p:first-letter { font-size: 3em; font-weight: normal }&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;span { font-weight: bold }&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;p&gt; &amp;lt;span&gt; I wish I have a map of my mind &amp;lt;/span&gt;, so I could find a way through my thoughts without always getting lost in fields of daydreams. And in the morning, they shook their pillows violently, hoping all the dreams they lost that night would tumble out. You can drive all night looking for the answer in the pouring rain. You want to find peace of mind looking for the answer inside the pouring rain. &amp;lt;/p&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Output: &lt;strong&gt;I wish I have a map of my mind&lt;/strong&gt;, so I could find a way through my thoughts without always getting lost in fields of daydreams. And in the morning, they shook their pillows violently, hoping all the dreams they lost that night would tumble out. You can drive all night looking for the answer in the pouring rain. You want to find peace of mind looking for the answer inside the pouring rain.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;:before&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;:after&lt;/code&gt; pseudo-elements&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Used to insert generated content before or after an element’s content&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;p.special:before { content: &quot;Daydream! &quot; }&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;p.special:first-letter { color: blue }&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Before: Daydream
After: &lt;strong&gt;D&lt;/strong&gt; aydream!&lt;/p&gt;
&lt;h2&gt;References:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://drafts.csswg.org/css2/selector.html#universal-selector&quot;&gt;https://drafts.csswg.org/css2/selector.html#universal-selector&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.sitepoint.com/css-selectors/&quot;&gt;https://www.sitepoint.com/css-selectors/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Study Notes: Reading CSS Pseudo-Elements Module Level 4]]></title><description><![CDATA[Original post by tae: Reading CSS Pseudo-Elements Module Level 4 Reading CSS Pseudo-Elements Module Level 4 that’s little bit long spec… but…]]></description><link>http://css.codinggirls.sg/notes-css-psuedo-elements-level4-tae/</link><guid isPermaLink="false">http://css.codinggirls.sg/notes-css-psuedo-elements-level4-tae/</guid><pubDate>Wed, 06 Mar 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Original post by &lt;a href=&quot;https://github.com/Ta2Rim&quot;&gt;tae&lt;/a&gt;: &lt;a href=&quot;https://gist.github.com/Ta2Rim/9bf65384e2683c8e4ed940ffac7f3e70&quot;&gt;Reading CSS Pseudo-Elements Module Level 4&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Reading CSS Pseudo-Elements Module Level 4&lt;/h1&gt;
&lt;p&gt;that’s little bit long spec… but finally I’ve done reading this!!&lt;/p&gt;
&lt;h2&gt;what I newly learned !!!&lt;/h2&gt;
&lt;h3&gt;Typographic Pseudo-elements&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-text&quot;&gt;::first-line&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;::first-line&lt;/code&gt; pseudo-element can only have an effect when attached to a block container. (that’s not out-of flow due to floating or positioning)&lt;/li&gt;
&lt;li&gt;fictional tag sequence helps to show how properties are inherited.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-text&quot;&gt;::first-letter&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;::first-letter&lt;/code&gt; pseudo-element can be used to create ‘initial caps’ and drop caps’&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;*dropcap : the first character of the first paragraph is made larger, taking up several lines of text or the first few sentences in typographic effects.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/41318449/53882058-9dc8e800-4058-11e9-9d48-d9a7dd545fc4.png&quot; alt=&quot;1&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;basically, UA may calculate how many columns ::first-letter for dropcap expand. with &lt;code class=&quot;language-text&quot;&gt;initial-letter&lt;/code&gt; property, author can choose size of columns.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://css-tricks.com/wp-content/uploads/2017/01/css-almanac-initial-letter-calculate.gif&quot; alt=&quot;2&quot;&gt;&lt;/p&gt;
&lt;p&gt;(Changing the property to occupy 1, 2 and 4 lines)
** In pervious levels of CSS, User Agents were allowed to choose a line height, width and height based on the shape of the letter. This possibility has been intentionally removed, as it proved to be a poor solution for the intended use case (Drop caps). **&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Following additional rules of each languages, &lt;code class=&quot;language-text&quot;&gt;::first-letter&lt;/code&gt; doesn’t mean that ‘ONE’ character. In Dutch, the letter combination IJ appears at the beginning of an element.&lt;/li&gt;
&lt;li&gt;inherit from &lt;code class=&quot;language-text&quot;&gt;::first-line&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;For now, &lt;code class=&quot;language-text&quot;&gt;::first-letter&lt;/code&gt; only applies block container desendant&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;p:before { content : &apos;Note&apos;; }&lt;/code&gt;
If &lt;code class=&quot;language-text&quot;&gt;:before&lt;/code&gt; element exists, ::first-letter would be ‘N’ of note&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Highlight Pseudo-elements&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The UA should use the OS-default highlight colors for &lt;code class=&quot;language-text&quot;&gt;::selction&lt;/code&gt; when neigher &lt;code class=&quot;language-text&quot;&gt;color&lt;/code&gt; nor &lt;code class=&quot;language-text&quot;&gt;background-color&lt;/code&gt; has been specified by the author&lt;/li&gt;
&lt;li&gt;Due to security problem, UA that implement ::spelling-error and ::grammer-error must prevent pages from being able to read the styling of such highlighted segments.&lt;/li&gt;
&lt;li&gt;Priority to paint the highlight : ::grammer-error &gt; ::spelling-error &gt; ::selection&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-text&quot;&gt;::selection&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;::inactive-selection&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pseudo-elements represent the portion of a doucment that has been selected as the target or object of some possible future user-agent operations.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Authors wanting multiple selections styles should use &lt;code class=&quot;language-text&quot;&gt;root::selection&lt;/code&gt; for their document-wide selection style. because &lt;code class=&quot;language-text&quot;&gt;::selection&lt;/code&gt; alone applies to every element in the tree (’*’ is implied when a tag selector is missing)&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-text&quot;&gt;::spelling-error&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pseudo-element represents a portion of text that has been flagged by the user agent as misspelled.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-text&quot;&gt;::grammer-error&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pseudo-element represnets a portion of text that has been flagged by the user agent as grammatically incorrect.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Tree-Abiding Pseudo-elements&lt;/h3&gt;
&lt;p&gt;Tree-abiding pseudo-elements always fit within the box tree. They inherit any inheritable properties form their &lt;em&gt;originating element&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-text&quot;&gt;::before&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;::after&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;As with the content of regular elements, the generated content of &lt;code class=&quot;language-text&quot;&gt;::before&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;::after&lt;/code&gt; pseudo-elements may be included in any &lt;code class=&quot;language-text&quot;&gt;::first-line&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;::first-letter&lt;/code&gt; pseudo-elements applied to its &lt;em&gt;originating element&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-text&quot;&gt;::marker&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code class=&quot;language-text&quot;&gt;::marker&lt;/code&gt; pseudo-element represents the automatically generated marker box of a list item. In further CSS, list-item property will be deprecated. only &lt;code class=&quot;language-text&quot;&gt;::marker&lt;/code&gt; properties are allowed.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-text&quot;&gt;::placeholder&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;Specific implementation of CSS Object Model&lt;/h3&gt;
&lt;p&gt;The &lt;em&gt;&lt;code class=&quot;language-text&quot;&gt;CSSPseudoElement&lt;/code&gt;&lt;/em&gt; interface allows pseudo-elements to be event targets.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;[Exposed=Window]
interface CSSPseudoElement : EventTarget {
  readonly attribute CSSOMString type;
  readonly attribute Element element;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Addition to the Element interface&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;partial interface Element {
  CSSPseudoElement? pseudo(CSSOMString type)
};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;opposite side&lt;/p&gt;
&lt;h3&gt;Compatibility Syntax&lt;/h3&gt;
&lt;p&gt;For compatibility with existing style sheets written agianst CSS Level 2, UA must also accept the previous one-colon notation. (&lt;code class=&quot;language-text&quot;&gt;:before&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;:after&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;:first-letter&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;first-line&lt;/code&gt;) for the &lt;code class=&quot;language-text&quot;&gt;::before&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;::after&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;::first-letter&lt;/code&gt;, and &lt;code class=&quot;language-text&quot;&gt;::first-line&lt;/code&gt; pseudo-elements&lt;/p&gt;
&lt;h2&gt;Important term&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Originating Element of Tree-Abiding pseudo-elements&lt;/li&gt;
&lt;li&gt;Fictional tag sequence that causes Overlapping Pseudo-element Interactions&lt;/li&gt;
&lt;li&gt;Compatibility&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Day 9 ~ 10: CSS Stamp]]></title><description><![CDATA[CSS Stamp Edges What’s your inner voice when handed a design that contains stampe edges?
I’d say I’m as obssessed as the designers about it…]]></description><link>http://css.codinggirls.sg/day-9-10--stamp/</link><guid isPermaLink="false">http://css.codinggirls.sg/day-9-10--stamp/</guid><pubDate>Tue, 05 Mar 2019 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;CSS Stamp Edges&lt;/h1&gt;
&lt;p&gt;What’s your inner voice when handed a design that contains stampe edges?
I’d say I’m as obssessed as the designers about it.
Every time I see a design like that, a coupon, an envelope, or perhaps just a stamp by itself.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I want to do it with CSS.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Is where my heart says.&lt;/p&gt;
&lt;p&gt;This topic is beautiful. As &lt;a href=&quot;https://dribbble.com/search?q=stamp&quot;&gt;a simple dribbble search&lt;/a&gt; gets you the idea. Here are some examples:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.dribbble.com/users/295355/screenshots/3353115/stampsdribbblefinal.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;What about this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.dribbble.com/users/548267/screenshots/5297588/adobe-sf-stamp_2x.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;And what about &lt;a href=&quot;https://dribbble.com/search?q=coupon&quot;&gt;a coupon&lt;/a&gt; (most of the the time, a coupon has only two sides that has the punched holes)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.dribbble.com/users/282234/screenshots/3809687/coupons.png&quot;&gt;&lt;/p&gt;
&lt;h2&gt;Objectives&lt;/h2&gt;
&lt;p&gt;Turn one of your favorite images to a stamp, like &lt;a href=&quot;https://codepen.io/wgao19/pen/vvrbeP&quot;&gt;this&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://codepen.io/wgao19/pen/vvrbeP&quot;&gt;&lt;div&gt;&lt;iframe 
        height=&apos;400&apos; 
        scrolling=&apos;no&apos; 
        src=&apos;//codepen.io/wgao19/embed/preview/vvrbeP/?height=400&amp;theme-id=dark&amp;default-tab=html,result&apos; 
        frameborder=&apos;no&apos; 
        allowtransparency=&apos;true&apos; 
        allowfullscreen=&apos;true&apos; 
        style=&apos;width: 100%;&apos;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Image credit goes to &lt;a href=&quot;https://dribbble.com/shots/3314912-Kawaii-Gameboy&quot;&gt;Kawaii Gameboy&lt;/a&gt; by &lt;a href=&quot;https://dribbble.com/jkane&quot;&gt;Jordan Jenkins&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.dribbble.com/users/295355/screenshots/3314912/gameboyv3.jpg&quot;&gt;&lt;/p&gt;
&lt;h2&gt;Reading&lt;/h2&gt;
&lt;p&gt;We’ve been creating hearts using pseudo-elements for three challenges now. Let’s read a bit into that today.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.w3.org/TR/css-pseudo-4/&quot;&gt;Pseudo-Elements Module Level 4&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Questions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;What is the difference between pseudo-element selectors and pseudo-selectors?&lt;/li&gt;
&lt;li&gt;What are three types of pseudo-element selectors?&lt;/li&gt;
&lt;li&gt;What is the criterion for pseudo-element selectors to show up?&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Contributing]]></title><description><![CDATA[Contributing Here’s our GitHub Repo. General Guide to OS Contribution For general guide to contributing to open source project, check out…]]></description><link>http://css.codinggirls.sg/contributing/</link><guid isPermaLink="false">http://css.codinggirls.sg/contributing/</guid><pubDate>Mon, 04 Mar 2019 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;Contributing&lt;/h1&gt;
&lt;p&gt;Here’s our &lt;a href=&quot;https://github.com/CodingGirlsSG/30-days-of-css&quot;&gt;GitHub Repo&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;General Guide to OS Contribution&lt;/h2&gt;
&lt;p&gt;For general guide to contributing to open source project, check out the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://egghead.io/courses/how-to-contribute-to-an-open-source-project-on-github&quot;&gt;How to Contribute to an Open Source Project on GitHub&lt;/a&gt; &lt;a href=&quot;https://egghead.io/&quot;&gt;egghead.io&lt;/a&gt; by &lt;a href=&quot;https://kentcdodds.com/&quot;&gt;Kent C. Dodds&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://opensource.guide/how-to-contribute/&quot;&gt;How to Contribute to Open Source&lt;/a&gt; by &lt;a href=&quot;https://opensource.guide/&quot;&gt;Open Source Guides&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Study Notes&lt;/h2&gt;
&lt;p&gt;To share your study notes, create a pull request to merge your post in.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Contributing Guide&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add your post to the following directory:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;site/content/blog/notes-${title_of_your_notes}/index.md&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Add the following front matter to the beginning your file&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;---
title: Hello, Coding Girls (and Guys)!
date: &apos;2019-01-19&apos;
---&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;If you have posted your notes at your own blog, website, etc, put a link at the beginning of the post, i.e.:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Original post by [who](http://link.to/your-website): [title of your post](http://link.to/your-post)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Use markdown syntax for your posts&lt;/li&gt;
&lt;li&gt;To preview your post:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token builtin class-name&quot;&gt;cd&lt;/span&gt; site
$ &lt;span class=&quot;token function&quot;&gt;yarn&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;yarn&lt;/span&gt; start&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By default, our blog site should be served at &lt;a href=&quot;http://localhost:8000/&quot;&gt;http://localhost:8000/&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Commit &amp;#x26; push your changes, and create a pull request to the &lt;code class=&quot;language-text&quot;&gt;master&lt;/code&gt; branch of our repo&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Website&lt;/h2&gt;
&lt;p&gt;If you see any CSS issue you want to improve, you may contribute to our website, or to our typography project &lt;a href=&quot;https://github.com/CodingGirlsSG/30-days-of-css/tree/master/packages/coding-girls-typography&quot;&gt;CodingGirls&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;All styling is written with pure CSS with an intentional focus on the fundamentals.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Contributing guide&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/CodingGirlsSG/30-days-of-css/issues/new&quot;&gt;Create an issue&lt;/a&gt; describing what changes you want to make&lt;/li&gt;
&lt;li&gt;Once the changes are agreed upon, create a pull request to our &lt;code class=&quot;language-text&quot;&gt;master&lt;/code&gt; branch&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Write in your pull request describing the following:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What does this pull request do?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Screenshot (if any) displaying the changes?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Is there anything the reviewer should take note of?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;Ask (in our channel) for someone to review your changes&lt;/li&gt;
&lt;li&gt;Once the pull request is reviewed, we’ll merge the changes in and you may expect your changes to be up in a few minutes!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Other Open Source Project&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://2019.jsconf.asia&quot;&gt;JSConf.Asia 2019&lt;/a&gt; is accepting pull requests to add animation to their site for free conference ticket.
Please note that this free ticket is separate than the one we provide.
If your animation is merged, you’ll win one ticket from them directly!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/serrynaimo/2019.jsconf.asia/pull/4&quot;&gt;This is the animation&lt;/a&gt; that won the ticket on Feb 1st.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Study Notes: Reading CSS Selectors]]></title><description><![CDATA[Original post by tae: Reading CSS Selectors Days 7~8 : Reading CSS Selectors I already know almost CSS selector yet, but I decide to read…]]></description><link>http://css.codinggirls.sg/notes-css-selectors-tae/</link><guid isPermaLink="false">http://css.codinggirls.sg/notes-css-selectors-tae/</guid><pubDate>Mon, 04 Mar 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Original post by &lt;a href=&quot;https://github.com/Ta2Rim&quot;&gt;tae&lt;/a&gt;: &lt;a href=&quot;https://gist.github.com/Ta2Rim/c408589579176c2483fd601ca87ec6be&quot;&gt;Reading CSS Selectors&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Days 7~8 : Reading CSS Selectors&lt;/h1&gt;
&lt;p&gt;I already know almost CSS selector yet, but I decide to read again, and remind it.
I like CSS selectors, especially pseudo-elements &amp;#x26; pseudo-classes
those enable isolated struction between styling and mark up. I love it. there’s no need to make useless div intented to only style thanks for those.&lt;/p&gt;
&lt;h2&gt;What I newly learned after reading spec&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Attribute selectors&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;[att|=val]&lt;/code&gt; Represents an element with the att attribute whose value is a white space-separated list of wrds, one of which is exactly ‘val’&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Compare pseudo-elements with pseudo-classes&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pseudo-elemnts create abstractions about the document tree beyond those specified by the document language.
CSS pseudo-element allow style some parts that document language doesn’t offer to access. (e.g. &lt;code class=&quot;language-text&quot;&gt;:first letter&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;:first line&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;:before&lt;/code&gt; , &lt;code class=&quot;language-text&quot;&gt;:after&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Pseudo-classes classify elements on chracteristics other than their name, attributes or content.&lt;/li&gt;
&lt;li&gt;Neither pseudo-element s nor pseudo-classes appear in the document source or document tree.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Pseudo-classes&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;UA are not required to reflow a currently displayed document due to pseudo-class transitions.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It means UA may ignore the style rule when dynamic pseudo classes cause change position and canvas reflow. + &lt;code class=&quot;language-text&quot;&gt;a:hover&lt;/code&gt; must be placed after &lt;code class=&quot;language-text&quot;&gt;a:link&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;a:visited&lt;/code&gt; rules. + The language pseudo-class : &lt;code class=&quot;language-text&quot;&gt;:lang(ko)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pseudo-elements&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;UA rewrite HTML paragraph due to pseudo-element, by including the fictional tag sequence.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;:first-line&lt;/code&gt; pseudo-lement can only be attached to a “block container element”,&lt;/li&gt;
&lt;li&gt;while &lt;code class=&quot;language-text&quot;&gt;:first-line&lt;/code&gt; pseudo-element start tag is inserted right after the start tag of the block element,
the :first-letter pseudo-element tags abut the content.( After the rule p:before {content:‘note’}, the selector p:first-letter matches the ‘n’ of note.&lt;/li&gt;
&lt;li&gt;The &lt;code class=&quot;language-text&quot;&gt;:before&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;:after&lt;/code&gt; pseudo-elements can be used to inset generated content before or after an element’s content&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Days 7 ~ 8: Seeing the Limit of Drawing with CSS]]></title><description><![CDATA[Seeing the Limit of Drawing with CSS I was trying to implement this design this design, Nintendo Switch by Louie Mantia. A few questions…]]></description><link>http://css.codinggirls.sg/day-7-8--heart-beyond-css/</link><guid isPermaLink="false">http://css.codinggirls.sg/day-7-8--heart-beyond-css/</guid><pubDate>Sun, 03 Mar 2019 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;Seeing the Limit of Drawing with CSS&lt;/h1&gt;
&lt;p&gt;I was trying to implement this design &lt;a href=&quot;https://dribbble.com/shots/3348456-Nintendo-Switch&quot;&gt;this design, Nintendo Switch&lt;/a&gt; by &lt;a href=&quot;https://dribbble.com/mantia&quot;&gt;Louie Mantia&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A few questions came up&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How do you draw the intersection near the handhelds?&lt;/li&gt;
&lt;li&gt;Do I really need to draw so many &lt;code class=&quot;language-text&quot;&gt;&amp;lt;div&gt;&lt;/code&gt;s for the control buttons?&lt;/li&gt;
&lt;li&gt;How to draw the curled boundary of the heart?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.dribbble.com/users/763/screenshots/3348456/switch.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;In short… are they even possible?&lt;/p&gt;
&lt;h2&gt;Objectives&lt;/h2&gt;
&lt;p&gt;That Nintendo Switch design is so beautiful you shall not move your eyes away from it until you get it :P&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://codepen.io/wgao19/pen/vvZoQW&quot;&gt;Just a hint&lt;/a&gt;, as always.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://codepen.io/wgao19/pen/vvZoQW&quot;&gt;&lt;div&gt;&lt;iframe 
        height=&apos;400&apos; 
        scrolling=&apos;no&apos; 
        src=&apos;//codepen.io/wgao19/embed/preview/vvZoQW/?height=400&amp;theme-id=dark&amp;default-tab=html,result&apos; 
        frameborder=&apos;no&apos; 
        allowtransparency=&apos;true&apos; 
        allowfullscreen=&apos;true&apos; 
        style=&apos;width: 100%;&apos;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Reading&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://drafts.csswg.org/css2/selector.html&quot;&gt;CSS Selectors&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Study Notes: Transform Establishes Containing Block for Descendants]]></title><description><![CDATA[Study notes by Wei, also published here.  Establishes Containing Block for Descendants A problem came up when I was trying to draw a heart…]]></description><link>http://css.codinggirls.sg/notes-transform-establishes-containing-block-for-descendants/</link><guid isPermaLink="false">http://css.codinggirls.sg/notes-transform-establishes-containing-block-for-descendants/</guid><pubDate>Sat, 02 Mar 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Study notes by &lt;a href=&quot;http://wgao19.cc&quot;&gt;Wei&lt;/a&gt;, also published &lt;a href=&quot;https://dev.wgao19.cc/transform-establishes-containing-block-for-descendants/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;&lt;code class=&quot;language-text&quot;&gt;transform&lt;/code&gt; Establishes Containing Block for Descendants&lt;/h1&gt;
&lt;p&gt;A problem came up when I was trying to draw a heart using CSS following &lt;a href=&quot;https://css-tricks.com/books/volume-i/make-heart-shape/&quot;&gt;this guide&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You draw a box first.
And then you draw two circles attached to two adjacent sides of the box.
Finally, you rotate the square by -45 degrees to get the heart upright (but the box is standing on its foot).
The whole idea is presented fairly straightforwardly by this diagram:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://css-tricks.com/wp-content/uploads/2017/05/book-heart-figure-2.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;For learning purposes, I tried to figure out which side is which alright.
So I went ahead and changed the colors of my &lt;code class=&quot;language-text&quot;&gt;::before&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;::after&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;css&quot;&gt;&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.heart:before&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; -15px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; pink&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token selector&quot;&gt;.heart:after&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; -15px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; teal&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/TKXeubZ.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;It looks like that my &lt;code class=&quot;language-text&quot;&gt;::before&lt;/code&gt; (pink) is on the left, my &lt;code class=&quot;language-text&quot;&gt;::after&lt;/code&gt; (teal) is on the right, and my heart is rotated counter-clockwise because &lt;code class=&quot;language-text&quot;&gt;::before&lt;/code&gt; is supposed to have a negative &lt;code class=&quot;language-text&quot;&gt;top&lt;/code&gt; offset, and &lt;code class=&quot;language-text&quot;&gt;::after&lt;/code&gt; is supposed to have a negative &lt;code class=&quot;language-text&quot;&gt;right&lt;/code&gt; offset.&lt;/p&gt;
&lt;p&gt;To verify this idea, I decided to take out the line that rotates the heart:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;css&quot;&gt;&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.heart&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;/* transform: rotate(-45deg); */&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I would expect my heart to lie down, right, something like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/otJ005K.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;But, uh, no. Not exactly. Once I remove that line and hit “refresh”. My heart is broken 😱.
Or to be more precise, torn apart.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/EEWvJq5.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;Before I go on explaining what went wrong, I have a couple of confessions to make.&lt;/p&gt;
&lt;p&gt;First, I did not follow the guide exactly. If you copy-and-pasted the code, you’d notice that the one of the rounded side does not show up. This is because it is missing the offset definition for the &lt;code class=&quot;language-text&quot;&gt;::after&lt;/code&gt; pseudo-element.&lt;/p&gt;
&lt;p&gt;But I assume you’d figured that out according to the diagram by yourself, too.&lt;/p&gt;
&lt;p&gt;Second, I gave my &lt;code class=&quot;language-text&quot;&gt;.heart&lt;/code&gt; element a margin offset so that it displays in the center of my screen:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;css&quot;&gt;&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.heart&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 300px auto 0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Without this line, the result would look a bit different, but equally wrong.&lt;/p&gt;
&lt;p&gt;Now let’s try to fix it together.&lt;/p&gt;
&lt;h2&gt;Attempt Fix&lt;/h2&gt;
&lt;p&gt;It seems to me that my torn apart heart has the &lt;code class=&quot;language-text&quot;&gt;::before&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;::after&lt;/code&gt; pseudo-elements positioned with respect to the &lt;em&gt;viewport&lt;/em&gt;, not their parent, which is the square &lt;code class=&quot;language-text&quot;&gt;.heart&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you are not familiar with this, I encourage you to read the CSS Specification &lt;a href=&quot;https://www.w3.org/TR/CSS2/visuren.html&quot;&gt;Visual Formatting Model&lt;/a&gt;.
And I quote here in section &lt;a href=&quot;https://www.w3.org/TR/CSS2/visuren.html#absolute-positioning&quot;&gt;9.8.4 Absolute positioning&lt;/a&gt; that &lt;em&gt;absolute positioned boxes are&lt;/em&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;… positioned with respect to its containing block. The containing block for a positioned box is established by the nearest positioned ancestor (or, if none exists, the initial containing block).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In human language (with a bit loss of precision), absolute positioned boxes are placed with repect to its nearest ancestor with &lt;code class=&quot;language-text&quot;&gt;position: relative&lt;/code&gt;. And if such ancestor does not exist, they are positioned with respect to the root element, which is (roughly) the viewport.&lt;/p&gt;
&lt;p&gt;So it seems that my &lt;code class=&quot;language-text&quot;&gt;::before&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;::after&lt;/code&gt; pseudo-elements could not find their &lt;code class=&quot;language-text&quot;&gt;position: relative&lt;/code&gt; ancestor, and so are placed with respect to the viewport.
They both have a negative offset equal to half of their diameters, so I have them neatly cut in half by the edges of my viewport.&lt;/p&gt;
&lt;p&gt;Knowing this, I should be able to fix this by adding the &lt;code class=&quot;language-text&quot;&gt;position: relative&lt;/code&gt; to my &lt;code class=&quot;language-text&quot;&gt;.heart&lt;/code&gt; element:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;css&quot;&gt;&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.heart&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;/* transform: rotate(-45deg); */&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; relative&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And, expectedly, my heart is fixed, and is lied down, &lt;a href=&quot;https://codepen.io/wgao19/pen/moPpEY&quot;&gt;CodePen: &lt;code class=&quot;language-text&quot;&gt;position: relative&lt;/code&gt; Establishes Containing Block for Descendants&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/otJ005K.png&quot;&gt;&lt;/p&gt;
&lt;h2&gt;The missing &lt;code class=&quot;language-text&quot;&gt;position: relative&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;An immediate question followed up: Have I &lt;em&gt;not&lt;/em&gt; initially put &lt;code class=&quot;language-text&quot;&gt;position: relative&lt;/code&gt; to my &lt;code class=&quot;language-text&quot;&gt;.heart&lt;/code&gt;?
No, right? How come initially the heart was intact?&lt;/p&gt;
&lt;p&gt;The only line of code I changed was:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;css&quot;&gt;&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.heart&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;rotate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;-45deg&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So something &lt;em&gt;else&lt;/em&gt; must have happened in between.
What if I try &lt;code class=&quot;language-text&quot;&gt;transform: rotate(0deg)&lt;/code&gt;, without &lt;code class=&quot;language-text&quot;&gt;position: relative&lt;/code&gt;, and see what happens?&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;css&quot;&gt;&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.heart&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;rotate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;0deg&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;/* position: relative; */&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I have a lied-down heart exactly like my previous fix! &lt;a href=&quot;https://codepen.io/wgao19/pen/LaNegv&quot;&gt;CodePen: Transform Establishes A Containing Block for All Descendants&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/otJ005K.png&quot;&gt;&lt;/p&gt;
&lt;h2&gt;&lt;code class=&quot;language-text&quot;&gt;transform&lt;/code&gt; other than &lt;code class=&quot;language-text&quot;&gt;none&lt;/code&gt; establishes a containing block&lt;/h2&gt;
&lt;p&gt;Turns out that:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;any value other than &lt;code class=&quot;language-text&quot;&gt;none&lt;/code&gt; for the transform property also causes the element to establish a containing block for all descendants.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Says section 3 &lt;a href=&quot;https://www.w3.org/TR/css-transforms-1/#transform-rendering&quot;&gt;The Transform Rendering Model&lt;/a&gt; of &lt;a href=&quot;https://www.w3.org/TR/css-transforms-1/&quot;&gt;CSS Transforms Module Level 1&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;What happens when you &lt;code class=&quot;language-text&quot;&gt;transform&lt;/code&gt; a box other than the transformation itself?&lt;/h2&gt;
&lt;p&gt;If you transform something, would you expect whatever inside to be transformed together?
If you do, you’d share the same intuition with CSS’s intention.
This includes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Establishes a containing block&lt;/strong&gt;: (again with some loss of precision) absolute positioned children will offset according to it, width / height will be calculated according to it, etc.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Creates a stacking context&lt;/strong&gt;: you may not make something look “inserted” to the stacking context even if you set a &lt;code class=&quot;language-text&quot;&gt;z-index&lt;/code&gt; that falls in the range, because anything inside that stacking context shall be atomic with respect to its outside.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And finally, the transformation &lt;em&gt;may&lt;/em&gt; extend, but not shrink, the size of the overflow area.
Intuitively, what this is saying is that if you transform a box, whatever was visible will remain visible after the transformation.
In this illustration below, the orange part will be the extended (visible) overflow area.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/RojEhn1.png&quot;&gt;&lt;/p&gt;
&lt;h2&gt;Specs Reading&lt;/h2&gt;
&lt;p&gt;I hope the exploration of this problem makes it easier for you to read the following sections of the CSS Specifications!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.w3.org/TR/css-transforms-1&quot;&gt;CSS Transforms Module Level 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.w3.org/TR/CSS2/visuren.html&quot;&gt;9 Visual formatting model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.w3.org/TR/CSS2/visudet.html&quot;&gt;10 Visual formatting model details&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Days 5 ~ 6: Heart Button]]></title><description><![CDATA[Heart Button Let’s create a heart button today. Objectives Create a heart button such as:  Original design: Favorites by Yi Jung Lai. hovers…]]></description><link>http://css.codinggirls.sg/day-5-6--heart-button/</link><guid isPermaLink="false">http://css.codinggirls.sg/day-5-6--heart-button/</guid><pubDate>Fri, 01 Mar 2019 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;Heart Button&lt;/h1&gt;
&lt;p&gt;Let’s create a heart button today.&lt;/p&gt;
&lt;h2&gt;Objectives&lt;/h2&gt;
&lt;p&gt;Create a heart button such as:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.dribbble.com/users/2544678/screenshots/5574342/day44.gif&quot;&gt;&lt;/p&gt;
&lt;p&gt;Original design: &lt;a href=&quot;https://dribbble.com/shots/5574342--044-Favorites&quot;&gt;Favorites&lt;/a&gt; by &lt;a href=&quot;https://dribbble.com/greenair33&quot;&gt;&lt;em&gt;Yi Jung Lai&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;hovers to trigger a “highlighted” state, i.e., a different heart color, etc&lt;/li&gt;
&lt;li&gt;clicks to trigger a “pressed down” state&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Reading&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.w3.org/TR/CSS2/box.html#box-model&quot;&gt;Box Model&lt;/a&gt; and &lt;a href=&quot;https://www.w3.org/TR/CSS2/visuren.html&quot;&gt;Visual Formatting Model&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;(Chapters 8 and 9 of &lt;a href=&quot;https://www.w3.org/TR/CSS2/&quot;&gt;Cascading Style Sheets Level 2&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Chapter 9 is a bit crazy, but very rewarding to read. Please be patient with it :)&lt;/p&gt;
&lt;h3&gt;Questions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;What are &lt;em&gt;content box&lt;/em&gt;, &lt;em&gt;margin box&lt;/em&gt;, &lt;em&gt;border box&lt;/em&gt;, &lt;em&gt;padding box&lt;/em&gt;, respectively?&lt;/li&gt;
&lt;li&gt;What is &lt;em&gt;collapsing margin&lt;/em&gt; and what would you do to avoid it?&lt;/li&gt;
&lt;li&gt;What are &lt;em&gt;containing blocks&lt;/em&gt;, &lt;em&gt;block-level elements&lt;/em&gt;, and &lt;em&gt;block boxes&lt;/em&gt;?&lt;/li&gt;
&lt;li&gt;What are &lt;em&gt;positioned elements&lt;/em&gt;?&lt;/li&gt;
&lt;li&gt;Explain “normal flow” :)&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Study Notes: Reading Introduction to CSS 2.1]]></title><description><![CDATA[Study notes by tae, also posted here. Reading introduction to CSS 2.1 - Question What are the ways to include stylesheets to webpages? CSS…]]></description><link>http://css.codinggirls.sg/notes-css-2-1-tae/</link><guid isPermaLink="false">http://css.codinggirls.sg/notes-css-2-1-tae/</guid><pubDate>Fri, 01 Mar 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Study notes by &lt;a href=&quot;https://github.com/Ta2Rim&quot;&gt;tae&lt;/a&gt;, also posted &lt;a href=&quot;https://gist.github.com/Ta2Rim/8df3a47d3f50530e39d3c845c58f2ee9&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;Reading introduction to CSS 2.1 - Question&lt;/h1&gt;
&lt;h2&gt;What are the ways to include stylesheets to webpages?&lt;/h2&gt;
&lt;p&gt;CSS can be used with any structured document format.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;HTML&lt;/li&gt;
&lt;li&gt;within HTML document (STYLE element)&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;STYLE&gt;
  h1 {color : red}
&amp;lt;/STYLE&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;via an external style sheet (LINK element)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;LINK rel=&quot;stylesheet&quot; href=&quot;app.css&quot; type=&quot;text/css&quot;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For maximum flexibility, the way that link to an exteral style sheet is better.&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;XML&lt;/li&gt;
&lt;li&gt;via an extenral style sheet (processing instruction)&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;  &amp;lt;?xml-stylehseet type=&quot;text/css&quot; herf=&quot;app.css&quot;?&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Unlike HTML, Element names in XML are case-sensitive. So a selector writen in lowercase is different from uppercase.&lt;/p&gt;
&lt;h2&gt;How does CSS combine multiple stylesheets that apply to the same webpage?&lt;/h2&gt;
&lt;p&gt;When CSS combine multiple stylesheets, there would be a lot of confilcts between different values in CSS.
To resolve this problem, the rule determine the final presentation of document. Because CSS rule tries to influence only one of properties needed for rendering an HTML document.&lt;/p&gt;
&lt;h2&gt;What are the steps a UA (browser) takes in order to apply styles to their underlying documents?&lt;/h2&gt;
&lt;p&gt;it’s according to CSS processing model.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Parse the source document and create a document tree.&lt;/li&gt;
&lt;li&gt;Identify the target media type. (e.g. print, screen, tty …etc)&lt;/li&gt;
&lt;li&gt;Retrieve all style sheets associated with the document that are specified for the target media type&lt;/li&gt;
&lt;li&gt;Annotate every element of the document tree by assigning a single value to every property.&lt;/li&gt;
&lt;li&gt;From the annotated document tree, generate a formatting structure.&lt;/li&gt;
&lt;li&gt;Transfer the formatting structure to the target medium. (e.g. print the results, display them on the screen, render them as speech)&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Name a few strengths and constraints of CSS.&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Strengths (CIIR)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Compatibility&lt;/p&gt;
&lt;p&gt;CSS 2.1 user agent can understand CSS1 style sheet. and vice versa. Although it can’t understand all of enhanced documents. but all content is presented.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Isolation&lt;/p&gt;
&lt;p&gt;CSS let change the style sheet with little or no impact on the markup.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Independence (to vendor, platform, device)&lt;/p&gt;
&lt;p&gt;CSS enable documents to remain vendor, platform, and device independent. and CSS 2.1 also allows authors to target a style sheet for a group of device.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Richness&lt;/p&gt;
&lt;p&gt;Providing authors with a rich set of rendring effects.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Constraints (LA)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Limited&lt;/p&gt;
&lt;p&gt;For all media, there is canvas that means ‘the space where the formating structure is rendered’. The canvas is infinite for each dimension of the space. but in CSS established by user agent, User agent may render to a page impose width and height constraints.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Abandonment&lt;/p&gt;
&lt;p&gt;In CSS rule, there’s no more syntax for structure. only selector and declaration exist. So, in perspective of maintaining some style, CSS has weakness.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;The more I study about CSS, the more I realize that CSS is amazing. Thanks for CSS, I can express what I imagined through CSS. I like CSS’s richness very much. I’ll show me to other people with my own website(with CSS).&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;we can comment or ask something or correct some mistakes… whatever reply on this markdown. thanks for reading! Let’s study together, passionately!!! 😃&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Study Notes: CSS 2.1]]></title><description><![CDATA[Study notes by swiftystar4, also posted here. CSS 2.1 - #30DaysofCSSGirls What are the ways to include stylesheets to webpages? Inline CSS…]]></description><link>http://css.codinggirls.sg/notes-css-2-1-swiftystar4/</link><guid isPermaLink="false">http://css.codinggirls.sg/notes-css-2-1-swiftystar4/</guid><pubDate>Thu, 28 Feb 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Study notes by &lt;a href=&quot;https://swiftystar13.wordpress.com/&quot;&gt;swiftystar4&lt;/a&gt;, also posted &lt;a href=&quot;https://gist.github.com/Ta2Rim/8df3a47d3f50530e39d3c845c58f2ee9&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;CSS 2.1 - #30DaysofCSSGirls&lt;/h1&gt;
&lt;h2&gt;What are the ways to include stylesheets to webpages?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Inline CSS - Apply CSS Style inside the HTML Tags (Elements)&lt;/li&gt;
&lt;li&gt;Internal Style Sheet - Apply CSS Styles inside &lt;head&gt; section in HTML using &lt;style&gt;&lt;/style&gt;&lt;/li&gt;
&lt;li&gt;External Style Sheet - Create another file, save it under .css extension and link up with earlier on that create css file first using &lt;link&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;How does CSS combine multiple stylesheets that apply to the same webpage?&lt;/h2&gt;
&lt;p&gt;Combination of multiple stylesheets required to label different alternate style sheets and using Javascript to apply into same webpage&lt;/p&gt;
&lt;h2&gt;What are the steps a UA (browser) takes in order to apply styles to their underlying documents?&lt;/h2&gt;
&lt;p&gt;Step 1: Start with Content. Writing raw content and see what the browsers work with it.&lt;/p&gt;
&lt;p&gt;Step 2: Give the Document Structure. Learning about HTML Element Syntax and the elements that give a document its structure.&lt;/p&gt;
&lt;p&gt;Step 3: Identify Text Elements. Describing about the content using appropriate text elements and learn the right way to use HTML.&lt;/p&gt;
&lt;p&gt;Step 4: Add an image. By adding an image into the page, learning about attributes and empty elements.&lt;/p&gt;
&lt;p&gt;Step 5: Change the page appearance with a stylesheet. Formatting content with Cascading Style Sheets.&lt;/p&gt;
&lt;h2&gt;Name a few strengths and constraints of CSS.&lt;/h2&gt;
&lt;h3&gt;Strength&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Consistency&lt;/p&gt;
&lt;p&gt;Ensure the web pages will have consistent styling on the website&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bandwidth Reduction&lt;/p&gt;
&lt;p&gt;Reduce in Bandwidth will result in a faster load time and cut the web hosting time&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Search Engines&lt;/p&gt;
&lt;p&gt;Content for search engines will be important as the people search the information from search function&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Browser Compatibility&lt;/p&gt;
&lt;p&gt;Increase the website’s adaptability and ensure that more visitors will be able to view the website in a more efficient way&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Viewing Options&lt;/p&gt;
&lt;p&gt;A part of the requirement in the making website make more viewing available in different media devices such as phone, tablets and PCs such as Laptops and Desktops&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Constraints&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Fragmentation&lt;/p&gt;
&lt;p&gt;CSS render different dimensions with each browser and require about considering and testing all code multiple browsers for&lt;br&gt;
compatibility before making live for any website and mobile applications&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Different Levels&lt;/p&gt;
&lt;p&gt;Different Levels to CSS: CSS; CSS 2; CSS 3. CSS Levels make confusion for the developers and browsers. One language is preferred&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Vulnerable&lt;/p&gt;
&lt;p&gt;Easily accessible due to open-text based system. Must require a read/write access to the website to avoid override the changes from the outsiders&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[Days 3 ~ 4: Beating Heart]]></title><description><![CDATA[Beating Heart Objectives Let’s deepen our knowledge about implementing the heart.
We’ll work on a slightly different heart icon, like this…]]></description><link>http://css.codinggirls.sg/day-3-4--beating-heart/</link><guid isPermaLink="false">http://css.codinggirls.sg/day-3-4--beating-heart/</guid><pubDate>Wed, 27 Feb 2019 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;Beating Heart&lt;/h1&gt;
&lt;h2&gt;Objectives&lt;/h2&gt;
&lt;p&gt;Let’s deepen our knowledge about implementing the heart.
We’ll work on a slightly different heart icon, like &lt;a href=&quot;https://codepen.io/wgao19/pen/qLrvaB&quot;&gt;this&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://codepen.io/wgao19/pen/qLrvaB&quot;&gt;&lt;div&gt;&lt;iframe 
        height=&apos;400&apos; 
        scrolling=&apos;no&apos; 
        src=&apos;//codepen.io/wgao19/embed/preview/qLrvaB/?height=400&amp;theme-id=dark&amp;default-tab=html,result&apos; 
        frameborder=&apos;no&apos; 
        allowtransparency=&apos;true&apos; 
        allowfullscreen=&apos;true&apos; 
        style=&apos;width: 100%;&apos;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Note a few changes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The heart is now white on a colored background&lt;/li&gt;
&lt;li&gt;Add shadow to the heart. You may try a few techniques such as &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/filter-function/drop-shadow&quot;&gt;drop-shadow&lt;/a&gt;, border, outline, &lt;a href=&quot;https://css-tricks.com/snippets/css/css-box-shadow/&quot;&gt;box-shadow&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;(Optional) Add a beating animation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/gjqdUIw.png&quot;&gt;&lt;/p&gt;
&lt;h2&gt;Reading&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.w3.org/TR/CSS2/intro.html&quot;&gt;Introduction to CSS 2.1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(Chapter 2 of &lt;a href=&quot;https://www.w3.org/TR/CSS2/&quot;&gt;Cascading Style Sheets Level 2&lt;/a&gt;)&lt;/p&gt;
&lt;h3&gt;Questions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;What are the ways to include stylesheets to webpages?&lt;/li&gt;
&lt;li&gt;How does CSS combine multiple stylesheets that apply to the same webpage?&lt;/li&gt;
&lt;li&gt;What are the steps a UA (browser) takes in order to apply styles to their underlying documents?&lt;/li&gt;
&lt;li&gt;Name a few strengths and constraints of CSS.&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Day 2: Specs Reading: CSS Snapshot 2018 (Overview)]]></title><description><![CDATA[Specs Reading: CSS Snapshot 2018 Welcome to the first day of CSS specs reading. We’ll list out which sections we’re reading for today.
And…]]></description><link>http://css.codinggirls.sg/day-2--css-snapshot-2018/</link><guid isPermaLink="false">http://css.codinggirls.sg/day-2--css-snapshot-2018/</guid><pubDate>Tue, 26 Feb 2019 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;Specs Reading: CSS Snapshot 2018&lt;/h1&gt;
&lt;p&gt;Welcome to the first day of CSS specs reading.&lt;/p&gt;
&lt;p&gt;We’ll list out which sections we’re reading for today.
And we’ll list out a few questions for you to find answers within today’s reading.&lt;/p&gt;
&lt;p&gt;There is no “answer keys” to those questions.
We will not provide an answer sheet, neither.
The purpose is to lead a few questions that you may use as a guideline.
i.e., after reading today’s sections, you should gain a fair understanding about those questions.&lt;/p&gt;
&lt;p&gt;Please join us for a discussion in the channel about what you learned through today’s reading.
You are more than welcome to write a blog post, too!
As &lt;a href=&quot;https://twitter.com/dan_abramov/status/1079214023881707520&quot;&gt;Dan Abramov tweeted&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you feel like you’ve learned something in the past few years I deeply recommend starting a blog, if only to catalog your thoughts.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Reading&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.w3.org/TR/css-2018/&quot;&gt;CSS Snapshot 2018 (Overview)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note: Today’s sections include this page only. You don’t need to recursively read all the referenced page yet. Feel free to read more, though, if you wish.&lt;/p&gt;
&lt;h2&gt;Questions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;What is &lt;em&gt;CSS&lt;/em&gt;?&lt;/li&gt;
&lt;li&gt;What is &lt;em&gt;CSS Snapshot&lt;/em&gt;?&lt;/li&gt;
&lt;li&gt;What are the three levels of stability a CSS document has to pass through? What happens during each of those phases?&lt;/li&gt;
&lt;li&gt;What are &lt;em&gt;CSS Levels&lt;/em&gt;?&lt;/li&gt;
&lt;li&gt;What is &lt;em&gt;CSS Level 3&lt;/em&gt;?&lt;/li&gt;
&lt;li&gt;Where do &lt;em&gt;Vendor-prefixing Unstable Features&lt;/em&gt; come from?&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Day 1: I Heart You, Coding Girls]]></title><description><![CDATA[I Heart You, Coding Girls Today, let’s draw a simple heart.  Sorry about the humongous sized picture. If you don’t want to be told the…]]></description><link>http://css.codinggirls.sg/day-1--i-heart-you-coding-girls/</link><guid isPermaLink="false">http://css.codinggirls.sg/day-1--i-heart-you-coding-girls/</guid><pubDate>Mon, 25 Feb 2019 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;I Heart You, Coding Girls&lt;/h1&gt;
&lt;p&gt;Today, let’s draw a simple heart.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://css-tricks.com/wp-content/uploads/2017/05/book-heart-figure-5.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;Sorry about the humongous sized picture. If you don’t want to be told the answer, try thinking of the solution on your own.&lt;/p&gt;
&lt;p&gt;If you’re the show-me-how-and-I’ll-just-do-it type, you may follow &lt;a href=&quot;https://css-tricks.com/books/volume-i/make-heart-shape/&quot;&gt;this guide&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We’re creating a shape using CSS! If you’ve had fun, maybe you’ll consider the following challenges:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://dribbble.com/shots/4863326-V-skyscrapers-heart-real-estate-logo-design&quot;&gt;V + skyscrapers + heart, real estate logo design&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.dribbble.com/users/5976/screenshots/4863326/v_skyscrapers_real_estate_logo_design_letter_mark_by_alex_tass.png&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Perhaps &lt;a href=&quot;https://dribbble.com/shots/4784479-Heart-fire-logo-concept-for-dating-app-2-for-sale&quot;&gt;this one&lt;/a&gt; can be a fun one, too.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.dribbble.com/users/1171903/screenshots/4784479/1-_recovered_.jpg&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://dribbble.com/shots/5656766-Surf-Love&quot;&gt;Surf Love&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.dribbble.com/users/61921/screenshots/5656766/lovewave.png&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://css-tricks.com/books/volume-i/make-heart-shape/&quot;&gt;CSS-Tricks: How to Make a Heart Shape&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://dribbble.com/search?q=heart&quot;&gt;More hearts on Dribbble&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Guidelines]]></title><description><![CDATA[Guidelines Works We’ll publish a challenge on alternate days with our sample provided on Codepen, but you’re free to choose your own. Those…]]></description><link>http://css.codinggirls.sg/guidelines/</link><guid isPermaLink="false">http://css.codinggirls.sg/guidelines/</guid><pubDate>Sat, 19 Jan 2019 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;Guidelines&lt;/h1&gt;
&lt;h2&gt;Works&lt;/h2&gt;
&lt;p&gt;We’ll publish a challenge on alternate days with our sample provided on &lt;a href=&quot;https://codepen.io/collection/XJJoBY/&quot;&gt;Codepen&lt;/a&gt;, but you’re free to choose your own. Those projects were built on inspiration from &lt;a href=&quot;https://dribbble.com/&quot;&gt;Dribbble&lt;/a&gt; or designs we find in daily life.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Daily Checklist&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create your &lt;a href=&quot;http://codepen.io&quot;&gt;Codepen&lt;/a&gt; and tag &lt;a href=&quot;https://codepen.io/tag/30DaysOfCSSGirls&quot;&gt;#30DaysOfCSSGirls&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;If you’re implementing someone else’s design, kindly give a reference to the original design. You may do so in your CodePen’s description or comment in the code.&lt;/li&gt;
&lt;li&gt;Feel free to tweet and share your project to the world and tag &lt;a href=&quot;https://twitter.com/search?f=tweets&amp;#x26;q=%2330DaysOfCSSGirls&quot;&gt;#30DaysOfCSSGirls&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Every other day, we will select a best project to be featured on CodingGirls Facebook Page&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Q&amp;#x26;A Channel&lt;/strong&gt;
&lt;a href=&quot;https://codinggirls-workspace.slack.com/&quot;&gt;https://codinggirls-workspace.slack.com/&lt;/a&gt;
Feel free to post any questions you have on our slack channel&lt;/p&gt;
&lt;h2&gt;Judging criteria&lt;/h2&gt;
&lt;p&gt;At end of the 30 days, there will be a lucky one to be selected to win a ticket to &lt;strong&gt;JSConf.Asia 2019&lt;/strong&gt; &lt;a href=&quot;https://2019.jsconf.asia/&quot;&gt;https://2019.jsconf.asia/&lt;/a&gt; which will be held 14-16 June 2019 in Singapore. Our selection criteria as below&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;completeness:&lt;/strong&gt; How many projects you have created constantly during the 30 days?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;creativity:&lt;/strong&gt; Yes we have provided a sample for you to play around, but it will up to you to do you own variations and have fun with CSS&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;give back:&lt;/strong&gt; Have you helped by answering questions from your peers? Or sharing your thoughts and feedback to your peers and mentors?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Reads&lt;/h2&gt;
&lt;p&gt;Every other day we’ll slow down on coding and take time to read CSS specifications.
You are encouraged to create simple CodePens to try out the things you read from the specs.
The specs we’ll read will be a select from &lt;a href=&quot;https://www.w3.org/TR/css-2018/&quot;&gt;CSS Snapshot 2018&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;What is &lt;em&gt;CSS Snapshot 2018&lt;/em&gt;?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;… collects together into one definition all the specs that together form the current state of Cascading Style Sheets (CSS) as of 2018.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.w3.org/TR/CSS2/&quot;&gt;CSS Level 2&lt;/a&gt; We’ll read a selection of sections from this doc&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.w3.org/TR/selectors-3/&quot;&gt;Selectors Level 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.w3.org/TR/css-backgrounds-3/&quot;&gt;CSS Backgrounds and Borders Module Level 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.w3.org/TR/css-fonts-3/&quot;&gt;CSS Fonts Module Level 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.w3.org/TR/css-flexbox-1/&quot;&gt;CSS Flexible Box Layout Module Level 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.w3.org/TR/css-grid-1/&quot;&gt;CSS Grid Layout Module Level 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.w3.org/TR/css-transforms-1/&quot;&gt;CSS Transforms Module Level 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.w3.org/TR/css-transitions-1/&quot;&gt;CSS Transitions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://codepen.io/collection/XJJoBY/&quot;&gt;CodePen Collection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://twitter.com/search?f=tweets&amp;#x26;q=%2330DaysOfCSSGirls&quot;&gt;Twitter #30DaysOfCSSGirls&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Websites&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web&quot;&gt;MDN Web Technology for Developers&lt;/a&gt; Mozilla’s web docs&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://css-tricks.com&quot;&gt;CSS-Tricks&lt;/a&gt; collection of high quality articles about CSS techniques&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://caniuse.com&quot;&gt;caniuse&lt;/a&gt; a website to check compatibility of CSS properties&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Study Materials&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.w3.org/Style/CSS/read.en.html&quot;&gt;Understanding the CSS Specifications&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Hello, Coding Girls (and Guys)!]]></title><description><![CDATA[Each day for the next 30 days, you will build a new project in plain, vanilla CSS. With our online tutorial and online Q&A channel, by the…]]></description><link>http://css.codinggirls.sg/hello/</link><guid isPermaLink="false">http://css.codinggirls.sg/hello/</guid><pubDate>Sat, 19 Jan 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Each day for the next 30 days, you will build a new project in plain, vanilla CSS.&lt;/p&gt;
&lt;p&gt;With our online tutorial and online Q&amp;#x26;A channel, by the end of the 30 days, you will have a strong understanding of CSS3, and more importantly, the knowledge, ability and confidence to start using CSS3 in your projects.&lt;/p&gt;
&lt;h2&gt;Who is &lt;em&gt;30 Days of CSS Girls&lt;/em&gt; for?&lt;/h2&gt;
&lt;p&gt;Anyone who are interested in Web Design &amp;#x26; Web Development, no background in computer science or engineering is needed :)&lt;/p&gt;
&lt;h2&gt;What You Need&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;A love of creating beautiful pages on the web.&lt;/li&gt;
&lt;li&gt;Complete the &lt;a href=&quot;https://www.freecodecamp.org/&quot;&gt;freeCodeCamp&lt;/a&gt;’s &lt;a href=&quot;https://learn.freecodecamp.org/responsive-web-design/basic-html-and-html5/&quot;&gt;Basic HTML &amp;#x26; HTML5&lt;/a&gt; and &lt;a href=&quot;https://learn.freecodecamp.org/responsive-web-design/basic-css&quot;&gt;Basic CSS&lt;/a&gt; curriculum.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Get Ready to…&lt;/h2&gt;
&lt;p&gt;Implement beautiful designs into web pages using CSS.&lt;/p&gt;
&lt;p&gt;The sources of design we’ll use in this course include &lt;a href=&quot;http://dribbble.com&quot;&gt;Dribbble&lt;/a&gt; designs, lovely patterns we find in real life, and any designs you want to implement!&lt;/p&gt;
&lt;p&gt;We’ll present a challenging task for you to work on every other day. On the &lt;em&gt;other&lt;/em&gt; (alternate) days we’ll be reading &lt;a href=&quot;https://www.w3.org/TR/css-2018/&quot;&gt;CSS Specs&lt;/a&gt; alongside the techniques we’ve used.
This will also be the day when you’ll create your own task, be it to implement some design of your imagination, or writing a blog post about what you’ve learned to recap and share your knowledge.&lt;/p&gt;
&lt;p&gt;We’ve designed the program this way because we realise reading the specs may have been the most effective way of learning CSS!
It gives you a rooting perspective — browser implementation. You are free to trace back to its origin, to understand the challenge and motivation of each CSS feature. And it keeps you updated to the most recent development.&lt;/p&gt;
&lt;p&gt;​​What’s the catch?&lt;/p&gt;
&lt;p&gt;Of course, you will have to work hard for it. Because reading the specs may be a bit daunting at first.&lt;/p&gt;
&lt;p&gt;But once you’ve read a few sections and have understood the basics, you’ll start to enjoy it.
Because the feeling of understanding the principles inside-out is simply… Amazing!&lt;/p&gt;
&lt;p&gt;We’ll keep you accompanied, cuz we’re striving to read them, too!!!
We’ll also be posting our study notes. We’ll focus on intuition. Hopefully that’ll pave the way for a more thorough understanding of CSS.&lt;/p&gt;
&lt;p&gt;So buckle up!&lt;/p&gt;</content:encoded></item></channel></rss>